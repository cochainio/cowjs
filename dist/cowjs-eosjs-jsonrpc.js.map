{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///./node_modules/axios/lib/utils.js","webpack:///../src/eosjs-numeric.ts","webpack:///./node_modules/process/browser.js","webpack:///../src/eosjs-rpcerror.ts","webpack:///./node_modules/bytebuffer/dist/bytebuffer.js","webpack:///./node_modules/axios/lib/defaults.js","webpack:///./node_modules/axios/lib/helpers/bind.js","webpack:///./node_modules/axios/lib/adapters/xhr.js","webpack:///./node_modules/axios/lib/core/createError.js","webpack:///./node_modules/axios/lib/cancel/isCancel.js","webpack:///./node_modules/axios/lib/cancel/Cancel.js","webpack:///./src/cowjs-eosjs/eosjs-jsonrpc.ts","webpack:///./node_modules/axios/index.js","webpack:///./node_modules/axios/lib/axios.js","webpack:///./node_modules/is-buffer/index.js","webpack:///./node_modules/axios/lib/core/Axios.js","webpack:///./node_modules/axios/lib/helpers/normalizeHeaderName.js","webpack:///./node_modules/axios/lib/core/settle.js","webpack:///./node_modules/axios/lib/core/enhanceError.js","webpack:///./node_modules/axios/lib/helpers/buildURL.js","webpack:///./node_modules/axios/lib/helpers/parseHeaders.js","webpack:///./node_modules/axios/lib/helpers/isURLSameOrigin.js","webpack:///./node_modules/axios/lib/helpers/btoa.js","webpack:///./node_modules/axios/lib/helpers/cookies.js","webpack:///./node_modules/axios/lib/core/InterceptorManager.js","webpack:///./node_modules/axios/lib/core/dispatchRequest.js","webpack:///./node_modules/axios/lib/core/transformData.js","webpack:///./node_modules/axios/lib/helpers/isAbsoluteURL.js","webpack:///./node_modules/axios/lib/helpers/combineURLs.js","webpack:///./node_modules/axios/lib/cancel/CancelToken.js","webpack:///./node_modules/axios/lib/helpers/spread.js","webpack:///./node_modules/long/dist/long.js","webpack:///./node_modules/eosjs/dist/ripemd.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","isBuffer","toString","isArray","val","isObject","isFunction","forEach","obj","fn","length","isArrayBuffer","isFormData","FormData","isArrayBufferView","ArrayBuffer","isView","buffer","isString","isNumber","isUndefined","isDate","isFile","isBlob","isStream","pipe","isURLSearchParams","URLSearchParams","isStandardBrowserEnv","navigator","product","document","merge","result","assignValue","arguments","extend","b","thisArg","trim","str","replace","ripemd160","RIPEMD160","hash","base58Chars","base64Chars","base58Map","base58M","Array","fill","charCodeAt","create_base58_map","KeyType","base64Map","base64M","create_base64_map","isNegative","bignum","negate","carry","x","decimalToBinary","size","Uint8Array","srcDigit","Error","j","binaryToDecimal","minDigits","push","reverse","String","fromCharCode","apply","__spread","base58ToBinary","binaryToBase58","bignum_1","__values","bignum_1_1","next","done","bignum_2","bignum_2_1","digestSuffixRipemd160","data","suffix","stringToKey","type","whole","digest","keyToString","prefix","stringToPublicKey","substr","publicKeyDataSize","k1","r1","publicKeyToString","convertLegacyPublicKey","signedDecimalToBinary","negative","signedBinaryToDecimal","slice","base64ToBinary","len","groups","bytes","group","digit0","digit1","digit2","digit3","privateKeyDataSize","signatureDataSize","convertLegacyPublicKeys","keys","map","stringToPrivateKey","privateKeyToString","stringToSignature","signatureToString","signature","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","e","this","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","run","marker","runClearTimeout","Item","array","noop","nextTick","args","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","RpcError","_super","json","_this","error","details","message","processed","except","setPrototypeOf","__extends","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","Long","ByteBuffer","capacity","littleEndian","noAssert","DEFAULT_CAPACITY","DEFAULT_ENDIAN","DEFAULT_NOASSERT","RangeError","EMPTY_BUFFER","view","offset","markedOffset","limit","VERSION","LITTLE_ENDIAN","BIG_ENDIAN","ByteBufferPrototype","__isByteBuffer__","configurable","stringFromCharCode","stringSource","stringDestination","cs","ps","join","ieee754_read","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","Infinity","Math","pow","ieee754_write","rt","abs","isNaN","floor","log","LN2","accessor","allocate","buffers","encoding","k","isByteBuffer","wrap","bi","bb","set","subarray","fromBase64","fromHex","fromBinary","fromUTF8","fromDebug","TypeError","clone","byteOffset","byteLength","writeBitSet","relative","start","bits","bit","writeVarint32","writeByte","readBitSet","ret","readVarint32","readByte","readBytes","writeBytes","append","writeInt8","capacity0","resize","readInt8","writeUint8","capacity1","writeUInt8","readUint8","readUInt8","writeInt16","capacity2","writeShort","readInt16","readShort","writeUint16","capacity3","writeUInt16","readUint16","readUInt16","writeInt32","capacity4","writeInt","readInt32","readInt","writeUint32","capacity5","writeUInt32","readUint32","readUInt32","writeInt64","fromNumber","fromString","capacity6","lo","low","hi","high","writeLong","readInt64","readLong","writeUint64","capacity7","writeUInt64","readUint64","readUInt64","writeFloat32","capacity8","writeFloat","readFloat32","readFloat","writeFloat64","capacity9","writeDouble","readFloat64","readDouble","MAX_VARINT32_BYTES","calculateVarint32","zigZagEncode32","zigZagDecode32","capacity10","writeVarint32ZigZag","err","readVarint32ZigZag","MAX_VARINT64_BYTES","calculateVarint64","part0","toInt","part1","shiftRightUnsigned","part2","zigZagEncode64","unsigned","toSigned","shiftLeft","xor","shiftRight","toUnsigned","zigZagDecode64","and","ONE","writeVarint64","capacity11","writeVarint64ZigZag","readVarint64","fromBits","readVarint64ZigZag","writeCString","utfx","calculateUTF16asUTF8","capacity12","encodeUTF16toUTF8","readCString","sd","decodeUTF8toUTF16","string","writeIString","capacity13","readIString","readUTF8String","METRICS_BYTES","METRICS_CHARS","writeUTF8String","capacity14","writeString","calculateUTF8Chars","calculateUTF8Bytes","calculateString","metrics","decodeUTF8","cp","UTF8toUTF16","readString","writeVString","capacity15","readVString","source","capacity16","appendTo","target","assert","clear","copy","compact","begin","end","copyTo","targetOffset","sourceOffset","sourceLimit","targetRelative","ensureCapacity","current","flip","mark","order","LE","BE","bigEndian","prepend","diff","prependTo","printDebug","out","console","toDebug","remaining","reset","skip","toBuffer","forceCopy","toArrayBuffer","toUTF8","toBase64","toHex","toBinary","toColumns","lxiv","aout","ain","encode","src","dst","decode","t1","t2","fail","test","btoa","atob","b64","chars","parts","charCode","columns","hex","asc","toUpperCase","ch","rs","ho","hm","hl","charAt","parseInt","substring","isFinite","MAX_CODEPOINT","encodeUTF8","indexOf","UTF16toUTF8","c1","c2","calculateCodePoint","calculateUTF8","utils","normalizeHeaderName","DEFAULT_CONTENT_TYPE","Content-Type","setContentTypeIfUnset","headers","adapter","defaults","XMLHttpRequest","transformRequest","JSON","stringify","transformResponse","parse","xsrfCookieName","xsrfHeaderName","maxContentLength","validateStatus","status","common","Accept","method","settle","buildURL","parseHeaders","isURLSameOrigin","createError","config","Promise","resolve","reject","requestData","requestHeaders","request","loadEvent","xDomain","XDomainRequest","url","onprogress","ontimeout","auth","username","password","Authorization","open","params","paramsSerializer","readyState","responseURL","responseHeaders","getAllResponseHeaders","response","responseType","responseText","statusText","onerror","cookies","xsrfValue","withCredentials","read","toLowerCase","setRequestHeader","onDownloadProgress","addEventListener","onUploadProgress","upload","cancelToken","promise","then","cancel","abort","send","enhanceError","code","__CANCEL__","Cancel","arrayToHex","data_1","data_1_1","JsonRpc","endpoint","coin","baseURL","api","axios__WEBPACK_IMPORTED_MODULE_0___default","get_abi","account_name","abiStr","abi","get_account","get_block_header_state","block_num_or_id","get_block","req","num_start","num_end","num_asc","include_transactions","id","post","block","blocks","ref_block_prefix","bytebuffer__WEBPACK_IMPORTED_MODULE_1__","timestamp","endsWith","num","block_num","get_code","code_as_wasm","include_code","raw","wast","wasm","code_hash","get_currency_balance","account","symbol","balances","balance","toFixed","get_currency_stats","currencies","contract","stats","_a","supply","max_supply","issuer","get_info","get_producer_schedule","get_producers","lower_bound","get_raw_code_and_abi","getRawAbi","accountName","rawCodeAndAbi","sent","eosjs_dist_eosjs_numeric__WEBPACK_IMPORTED_MODULE_2__","get_table_rows","_b","scope","table","_d","table_key","_e","upper_bound","_f","binary","getRequiredKeys","transaction","available_keys","availableKeys","required_keys","push_transaction","signatures","serializedTransaction","tx","packed_trx","e_2","msg","eosjs_dist_eosjs_rpcerror__WEBPACK_IMPORTED_MODULE_3__","transaction_id","tx_id","db_size_get","history_get_actions","pos","history_get_transaction","block_num_hint","history_get_key_accounts","public_key","account_names","accounts","history_get_controlled_accounts","controlling_account","Axios","createInstance","defaultConfig","context","instance","axios","instanceConfig","CancelToken","isCancel","all","promises","spread","default","constructor","readFloatLE","isSlowBuffer","_isBuffer","InterceptorManager","dispatchRequest","interceptors","chain","interceptor","unshift","fulfilled","rejected","shift","normalizedName","encodeURIComponent","serializedParams","v","toISOString","ignoreDuplicateOf","parsed","split","line","originURL","msie","userAgent","urlParsingNode","createElement","resolveURL","href","setAttribute","protocol","host","search","hostname","port","pathname","location","requestURL","E","input","output","idx","write","expires","path","domain","secure","cookie","Date","toGMTString","match","RegExp","decodeURIComponent","remove","now","handlers","use","eject","h","transformData","isAbsoluteURL","combineURLs","throwIfCancellationRequested","throwIfRequested","reason","fns","relativeURL","executor","resolvePromise","token","callback","arr","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","min","power","mul","add","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toNumber","isZero","eq","radixLong","div","rem1","sub","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","isPositive","isOdd","isEven","equals","other","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","lte","greaterThan","gt","greaterThanOrEqual","gte","compare","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","b00","divide","divisor","approx","res","shru","shr","shl","max","log2","ceil","delta","approxRes","approxRem","modulo","mod","or","numBits","toBytes","le","toBytesLE","toBytesBE","_slicedToArray","iterator","_arr","_n","_s","_i","sliceIterator","_createClass","defineProperties","props","descriptor","writable","Constructor","protoProps","staticProps","_classCallCheck","message_size","dividend","n_pad","get_n_pad_bytes","_divmod$map","index","_divmod$map2","msg_bit_size_most","msg_bit_size_least","padded","data_view","DataView","setUint8","setUint32","y","z","from","reduce","count","pad","rP","sP","X","_","getUint32","A","B","C","D","AP","BP","CP","DP","EP","_T","add_modulo32","rol32","f","K","KP","T","h_i"],"mappings":"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","file":"cowjs-eosjs-jsonrpc.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 31);\n","'use strict';\n\nvar bind = require('./helpers/bind');\nvar isBuffer = require('is-buffer');\n\n/*global toString:true*/\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.replace(/^\\s*/, '').replace(/\\s*$/, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (typeof result[key] === 'object' && typeof val === 'object') {\n      result[key] = merge(result[key], val);\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim\n};\n",null,"// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n",null,"/*\r\n Copyright 2013-2014 Daniel Wirtz <dcode@dcode.io>\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>\r\n * Backing buffer: ArrayBuffer, Accessor: Uint8Array\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/bytebuffer.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([\"long\"], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module['exports'] = (function() {\r\n            var Long; try { Long = require(\"long\"); } catch (e) {}\r\n            return factory(Long);\r\n        })();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"ByteBuffer\"] = factory(global[\"dcodeIO\"][\"Long\"]);\r\n\r\n})(this, function(Long) {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a new ByteBuffer.\r\n     * @class The swiss army knife for binary data in JavaScript.\r\n     * @exports ByteBuffer\r\n     * @constructor\r\n     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @expose\r\n     */\r\n    var ByteBuffer = function(capacity, littleEndian, noAssert) {\r\n        if (typeof capacity === 'undefined')\r\n            capacity = ByteBuffer.DEFAULT_CAPACITY;\r\n        if (typeof littleEndian === 'undefined')\r\n            littleEndian = ByteBuffer.DEFAULT_ENDIAN;\r\n        if (typeof noAssert === 'undefined')\r\n            noAssert = ByteBuffer.DEFAULT_NOASSERT;\r\n        if (!noAssert) {\r\n            capacity = capacity | 0;\r\n            if (capacity < 0)\r\n                throw RangeError(\"Illegal capacity\");\r\n            littleEndian = !!littleEndian;\r\n            noAssert = !!noAssert;\r\n        }\r\n\r\n        /**\r\n         * Backing ArrayBuffer.\r\n         * @type {!ArrayBuffer}\r\n         * @expose\r\n         */\r\n        this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);\r\n\r\n        /**\r\n         * Uint8Array utilized to manipulate the backing buffer. Becomes `null` if the backing buffer has a capacity of `0`.\r\n         * @type {?Uint8Array}\r\n         * @expose\r\n         */\r\n        this.view = capacity === 0 ? null : new Uint8Array(this.buffer);\r\n\r\n        /**\r\n         * Absolute read/write offset.\r\n         * @type {number}\r\n         * @expose\r\n         * @see ByteBuffer#flip\r\n         * @see ByteBuffer#clear\r\n         */\r\n        this.offset = 0;\r\n\r\n        /**\r\n         * Marked offset.\r\n         * @type {number}\r\n         * @expose\r\n         * @see ByteBuffer#mark\r\n         * @see ByteBuffer#reset\r\n         */\r\n        this.markedOffset = -1;\r\n\r\n        /**\r\n         * Absolute limit of the contained data. Set to the backing buffer's capacity upon allocation.\r\n         * @type {number}\r\n         * @expose\r\n         * @see ByteBuffer#flip\r\n         * @see ByteBuffer#clear\r\n         */\r\n        this.limit = capacity;\r\n\r\n        /**\r\n         * Whether to use little endian byte order, defaults to `false` for big endian.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        this.littleEndian = littleEndian;\r\n\r\n        /**\r\n         * Whether to skip assertions of offsets and values, defaults to `false`.\r\n         * @type {boolean}\r\n         * @expose\r\n         */\r\n        this.noAssert = noAssert;\r\n    };\r\n\r\n    /**\r\n     * ByteBuffer version.\r\n     * @type {string}\r\n     * @const\r\n     * @expose\r\n     */\r\n    ByteBuffer.VERSION = \"5.0.1\";\r\n\r\n    /**\r\n     * Little endian constant that can be used instead of its boolean value. Evaluates to `true`.\r\n     * @type {boolean}\r\n     * @const\r\n     * @expose\r\n     */\r\n    ByteBuffer.LITTLE_ENDIAN = true;\r\n\r\n    /**\r\n     * Big endian constant that can be used instead of its boolean value. Evaluates to `false`.\r\n     * @type {boolean}\r\n     * @const\r\n     * @expose\r\n     */\r\n    ByteBuffer.BIG_ENDIAN = false;\r\n\r\n    /**\r\n     * Default initial capacity of `16`.\r\n     * @type {number}\r\n     * @expose\r\n     */\r\n    ByteBuffer.DEFAULT_CAPACITY = 16;\r\n\r\n    /**\r\n     * Default endianess of `false` for big endian.\r\n     * @type {boolean}\r\n     * @expose\r\n     */\r\n    ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;\r\n\r\n    /**\r\n     * Default no assertions flag of `false`.\r\n     * @type {boolean}\r\n     * @expose\r\n     */\r\n    ByteBuffer.DEFAULT_NOASSERT = false;\r\n\r\n    /**\r\n     * A `Long` class for representing a 64-bit two's-complement integer value. May be `null` if Long.js has not been loaded\r\n     *  and int64 support is not available.\r\n     * @type {?Long}\r\n     * @const\r\n     * @see https://github.com/dcodeIO/long.js\r\n     * @expose\r\n     */\r\n    ByteBuffer.Long = Long || null;\r\n\r\n    /**\r\n     * @alias ByteBuffer.prototype\r\n     * @inner\r\n     */\r\n    var ByteBufferPrototype = ByteBuffer.prototype;\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a ByteBuffer or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @expose\r\n     * @private\r\n     */\r\n    ByteBufferPrototype.__isByteBuffer__;\r\n\r\n    Object.defineProperty(ByteBufferPrototype, \"__isByteBuffer__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    // helpers\r\n\r\n    /**\r\n     * @type {!ArrayBuffer}\r\n     * @inner\r\n     */\r\n    var EMPTY_BUFFER = new ArrayBuffer(0);\r\n\r\n    /**\r\n     * String.fromCharCode reference for compile-time renaming.\r\n     * @type {function(...number):string}\r\n     * @inner\r\n     */\r\n    var stringFromCharCode = String.fromCharCode;\r\n\r\n    /**\r\n     * Creates a source function for a string.\r\n     * @param {string} s String to read from\r\n     * @returns {function():number|null} Source function returning the next char code respectively `null` if there are\r\n     *  no more characters left.\r\n     * @throws {TypeError} If the argument is invalid\r\n     * @inner\r\n     */\r\n    function stringSource(s) {\r\n        var i=0; return function() {\r\n            return i < s.length ? s.charCodeAt(i++) : null;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Creates a destination function for a string.\r\n     * @returns {function(number=):undefined|string} Destination function successively called with the next char code.\r\n     *  Returns the final string when called without arguments.\r\n     * @inner\r\n     */\r\n    function stringDestination() {\r\n        var cs = [], ps = []; return function() {\r\n            if (arguments.length === 0)\r\n                return ps.join('')+stringFromCharCode.apply(String, cs);\r\n            if (cs.length + arguments.length > 1024)\r\n                ps.push(stringFromCharCode.apply(String, cs)),\r\n                    cs.length = 0;\r\n            Array.prototype.push.apply(cs, arguments);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets the accessor type.\r\n     * @returns {Function} `Buffer` under node.js, `Uint8Array` respectively `DataView` in the browser (classes)\r\n     * @expose\r\n     */\r\n    ByteBuffer.accessor = function() {\r\n        return Uint8Array;\r\n    };\r\n    /**\r\n     * Allocates a new ByteBuffer backed by a buffer of the specified capacity.\r\n     * @param {number=} capacity Initial capacity. Defaults to {@link ByteBuffer.DEFAULT_CAPACITY}.\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @returns {!ByteBuffer}\r\n     * @expose\r\n     */\r\n    ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {\r\n        return new ByteBuffer(capacity, littleEndian, noAssert);\r\n    };\r\n\r\n    /**\r\n     * Concatenates multiple ByteBuffers into one.\r\n     * @param {!Array.<!ByteBuffer|!ArrayBuffer|!Uint8Array|string>} buffers Buffers to concatenate\r\n     * @param {(string|boolean)=} encoding String encoding if `buffers` contains a string (\"base64\", \"hex\", \"binary\",\r\n     *  defaults to \"utf8\")\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order for the resulting ByteBuffer. Defaults\r\n     *  to {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values for the resulting ByteBuffer. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @returns {!ByteBuffer} Concatenated ByteBuffer\r\n     * @expose\r\n     */\r\n    ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {\r\n        if (typeof encoding === 'boolean' || typeof encoding !== 'string') {\r\n            noAssert = littleEndian;\r\n            littleEndian = encoding;\r\n            encoding = undefined;\r\n        }\r\n        var capacity = 0;\r\n        for (var i=0, k=buffers.length, length; i<k; ++i) {\r\n            if (!ByteBuffer.isByteBuffer(buffers[i]))\r\n                buffers[i] = ByteBuffer.wrap(buffers[i], encoding);\r\n            length = buffers[i].limit - buffers[i].offset;\r\n            if (length > 0) capacity += length;\r\n        }\r\n        if (capacity === 0)\r\n            return new ByteBuffer(0, littleEndian, noAssert);\r\n        var bb = new ByteBuffer(capacity, littleEndian, noAssert),\r\n            bi;\r\n        i=0; while (i<k) {\r\n            bi = buffers[i++];\r\n            length = bi.limit - bi.offset;\r\n            if (length <= 0) continue;\r\n            bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);\r\n            bb.offset += length;\r\n        }\r\n        bb.limit = bb.offset;\r\n        bb.offset = 0;\r\n        return bb;\r\n    };\r\n\r\n    /**\r\n     * Tests if the specified type is a ByteBuffer.\r\n     * @param {*} bb ByteBuffer to test\r\n     * @returns {boolean} `true` if it is a ByteBuffer, otherwise `false`\r\n     * @expose\r\n     */\r\n    ByteBuffer.isByteBuffer = function(bb) {\r\n        return (bb && bb[\"__isByteBuffer__\"]) === true;\r\n    };\r\n    /**\r\n     * Gets the backing buffer type.\r\n     * @returns {Function} `Buffer` under node.js, `ArrayBuffer` in the browser (classes)\r\n     * @expose\r\n     */\r\n    ByteBuffer.type = function() {\r\n        return ArrayBuffer;\r\n    };\r\n    /**\r\n     * Wraps a buffer or a string. Sets the allocated ByteBuffer's {@link ByteBuffer#offset} to `0` and its\r\n     *  {@link ByteBuffer#limit} to the length of the wrapped data.\r\n     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string|!Array.<number>} buffer Anything that can be wrapped\r\n     * @param {(string|boolean)=} encoding String encoding if `buffer` is a string (\"base64\", \"hex\", \"binary\", defaults to\r\n     *  \"utf8\")\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @returns {!ByteBuffer} A ByteBuffer wrapping `buffer`\r\n     * @expose\r\n     */\r\n    ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {\r\n        if (typeof encoding !== 'string') {\r\n            noAssert = littleEndian;\r\n            littleEndian = encoding;\r\n            encoding = undefined;\r\n        }\r\n        if (typeof buffer === 'string') {\r\n            if (typeof encoding === 'undefined')\r\n                encoding = \"utf8\";\r\n            switch (encoding) {\r\n                case \"base64\":\r\n                    return ByteBuffer.fromBase64(buffer, littleEndian);\r\n                case \"hex\":\r\n                    return ByteBuffer.fromHex(buffer, littleEndian);\r\n                case \"binary\":\r\n                    return ByteBuffer.fromBinary(buffer, littleEndian);\r\n                case \"utf8\":\r\n                    return ByteBuffer.fromUTF8(buffer, littleEndian);\r\n                case \"debug\":\r\n                    return ByteBuffer.fromDebug(buffer, littleEndian);\r\n                default:\r\n                    throw Error(\"Unsupported encoding: \"+encoding);\r\n            }\r\n        }\r\n        if (buffer === null || typeof buffer !== 'object')\r\n            throw TypeError(\"Illegal buffer\");\r\n        var bb;\r\n        if (ByteBuffer.isByteBuffer(buffer)) {\r\n            bb = ByteBufferPrototype.clone.call(buffer);\r\n            bb.markedOffset = -1;\r\n            return bb;\r\n        }\r\n        if (buffer instanceof Uint8Array) { // Extract ArrayBuffer from Uint8Array\r\n            bb = new ByteBuffer(0, littleEndian, noAssert);\r\n            if (buffer.length > 0) { // Avoid references to more than one EMPTY_BUFFER\r\n                bb.buffer = buffer.buffer;\r\n                bb.offset = buffer.byteOffset;\r\n                bb.limit = buffer.byteOffset + buffer.byteLength;\r\n                bb.view = new Uint8Array(buffer.buffer);\r\n            }\r\n        } else if (buffer instanceof ArrayBuffer) { // Reuse ArrayBuffer\r\n            bb = new ByteBuffer(0, littleEndian, noAssert);\r\n            if (buffer.byteLength > 0) {\r\n                bb.buffer = buffer;\r\n                bb.offset = 0;\r\n                bb.limit = buffer.byteLength;\r\n                bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;\r\n            }\r\n        } else if (Object.prototype.toString.call(buffer) === \"[object Array]\") { // Create from octets\r\n            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);\r\n            bb.limit = buffer.length;\r\n            for (var i=0; i<buffer.length; ++i)\r\n                bb.view[i] = buffer[i];\r\n        } else\r\n            throw TypeError(\"Illegal buffer\"); // Otherwise fail\r\n        return bb;\r\n    };\r\n\r\n    /**\r\n     * Writes the array as a bitset.\r\n     * @param {Array<boolean>} value Array of booleans to write\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.\r\n     * @returns {!ByteBuffer}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeBitSet = function(value, offset) {\r\n      var relative = typeof offset === 'undefined';\n      if (relative) offset = this.offset;\n      if (!this.noAssert) {\r\n        if (!(value instanceof Array))\r\n          throw TypeError(\"Illegal BitSet: Not an array\");\r\n        if (typeof offset !== 'number' || offset % 1 !== 0)\n            throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n        offset >>>= 0;\n        if (offset < 0 || offset + 0 > this.buffer.byteLength)\n            throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n      }\r\n\r\n      var start = offset,\r\n          bits = value.length,\r\n          bytes = (bits >> 3),\r\n          bit = 0,\r\n          k;\r\n\r\n      offset += this.writeVarint32(bits,offset);\r\n\r\n      while(bytes--) {\r\n        k = (!!value[bit++] & 1) |\r\n            ((!!value[bit++] & 1) << 1) |\r\n            ((!!value[bit++] & 1) << 2) |\r\n            ((!!value[bit++] & 1) << 3) |\r\n            ((!!value[bit++] & 1) << 4) |\r\n            ((!!value[bit++] & 1) << 5) |\r\n            ((!!value[bit++] & 1) << 6) |\r\n            ((!!value[bit++] & 1) << 7);\r\n        this.writeByte(k,offset++);\r\n      }\r\n\r\n      if(bit < bits) {\r\n        var m = 0; k = 0;\r\n        while(bit < bits) k = k | ((!!value[bit++] & 1) << (m++));\r\n        this.writeByte(k,offset++);\r\n      }\r\n\r\n      if (relative) {\r\n        this.offset = offset;\r\n        return this;\r\n      }\r\n      return offset - start;\r\n    }\r\n\r\n    /**\r\n     * Reads a BitSet as an array of booleans.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.\r\n     * @returns {Array<boolean>\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readBitSet = function(offset) {\r\n      var relative = typeof offset === 'undefined';\n      if (relative) offset = this.offset;\n\r\n      var ret = this.readVarint32(offset),\r\n          bits = ret.value,\r\n          bytes = (bits >> 3),\r\n          bit = 0,\r\n          value = [],\r\n          k;\r\n\r\n      offset += ret.length;\r\n\r\n      while(bytes--) {\r\n        k = this.readByte(offset++);\r\n        value[bit++] = !!(k & 0x01);\r\n        value[bit++] = !!(k & 0x02);\r\n        value[bit++] = !!(k & 0x04);\r\n        value[bit++] = !!(k & 0x08);\r\n        value[bit++] = !!(k & 0x10);\r\n        value[bit++] = !!(k & 0x20);\r\n        value[bit++] = !!(k & 0x40);\r\n        value[bit++] = !!(k & 0x80);\r\n      }\r\n\r\n      if(bit < bits) {\r\n        var m = 0;\r\n        k = this.readByte(offset++);\r\n        while(bit < bits) value[bit++] = !!((k >> (m++)) & 1);\r\n      }\r\n\r\n      if (relative) {\r\n        this.offset = offset;\r\n      }\r\n      return value;\r\n    }\r\n    /**\r\n     * Reads the specified number of bytes.\r\n     * @param {number} length Number of bytes to read\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `length` if omitted.\r\n     * @returns {!ByteBuffer}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readBytes = function(length, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + length > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+length+\") <= \"+this.buffer.byteLength);\n        }\r\n        var slice = this.slice(offset, offset + length);\r\n        if (relative) this.offset += length;\n        return slice;\r\n    };\r\n\r\n    /**\r\n     * Writes a payload of bytes. This is an alias of {@link ByteBuffer#append}.\r\n     * @function\r\n     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to write. If `source` is a ByteBuffer, its offsets\r\n     *  will be modified according to the performed read operation.\r\n     * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;\r\n\r\n    // types/ints/int8\r\n\r\n    /**\r\n     * Writes an 8bit signed integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeInt8 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value |= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 1;\n        var capacity0 = this.buffer.byteLength;\n        if (offset > capacity0)\n            this.resize((capacity0 *= 2) > offset ? capacity0 : offset);\n        offset -= 1;\n        this.view[offset] = value;\r\n        if (relative) this.offset += 1;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes an 8bit signed integer. This is an alias of {@link ByteBuffer#writeInt8}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;\r\n\r\n    /**\r\n     * Reads an 8bit signed integer.\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readInt8 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = this.view[offset];\r\n        if ((value & 0x80) === 0x80) value = -(0xFF - value + 1); // Cast to signed\r\n        if (relative) this.offset += 1;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads an 8bit signed integer. This is an alias of {@link ByteBuffer#readInt8}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;\r\n\r\n    /**\r\n     * Writes an 8bit unsigned integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUint8 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value >>>= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 1;\n        var capacity1 = this.buffer.byteLength;\n        if (offset > capacity1)\n            this.resize((capacity1 *= 2) > offset ? capacity1 : offset);\n        offset -= 1;\n        this.view[offset] = value;\r\n        if (relative) this.offset += 1;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes an 8bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint8}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;\r\n\r\n    /**\r\n     * Reads an 8bit unsigned integer.\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUint8 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = this.view[offset];\r\n        if (relative) this.offset += 1;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads an 8bit unsigned integer. This is an alias of {@link ByteBuffer#readUint8}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `1` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;\r\n\r\n    // types/ints/int16\r\n\r\n    /**\r\n     * Writes a 16bit signed integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @throws {TypeError} If `offset` or `value` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeInt16 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value |= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 2;\n        var capacity2 = this.buffer.byteLength;\n        if (offset > capacity2)\n            this.resize((capacity2 *= 2) > offset ? capacity2 : offset);\n        offset -= 2;\n        if (this.littleEndian) {\r\n            this.view[offset+1] = (value & 0xFF00) >>> 8;\r\n            this.view[offset  ] =  value & 0x00FF;\r\n        } else {\r\n            this.view[offset]   = (value & 0xFF00) >>> 8;\r\n            this.view[offset+1] =  value & 0x00FF;\r\n        }\r\n        if (relative) this.offset += 2;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes a 16bit signed integer. This is an alias of {@link ByteBuffer#writeInt16}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @throws {TypeError} If `offset` or `value` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;\r\n\r\n    /**\r\n     * Reads a 16bit signed integer.\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @returns {number} Value read\r\n     * @throws {TypeError} If `offset` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readInt16 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 2 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = 0;\r\n        if (this.littleEndian) {\r\n            value  = this.view[offset  ];\r\n            value |= this.view[offset+1] << 8;\r\n        } else {\r\n            value  = this.view[offset  ] << 8;\r\n            value |= this.view[offset+1];\r\n        }\r\n        if ((value & 0x8000) === 0x8000) value = -(0xFFFF - value + 1); // Cast to signed\r\n        if (relative) this.offset += 2;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads a 16bit signed integer. This is an alias of {@link ByteBuffer#readInt16}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @returns {number} Value read\r\n     * @throws {TypeError} If `offset` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;\r\n\r\n    /**\r\n     * Writes a 16bit unsigned integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @throws {TypeError} If `offset` or `value` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUint16 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value >>>= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 2;\n        var capacity3 = this.buffer.byteLength;\n        if (offset > capacity3)\n            this.resize((capacity3 *= 2) > offset ? capacity3 : offset);\n        offset -= 2;\n        if (this.littleEndian) {\r\n            this.view[offset+1] = (value & 0xFF00) >>> 8;\r\n            this.view[offset  ] =  value & 0x00FF;\r\n        } else {\r\n            this.view[offset]   = (value & 0xFF00) >>> 8;\r\n            this.view[offset+1] =  value & 0x00FF;\r\n        }\r\n        if (relative) this.offset += 2;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes a 16bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint16}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @throws {TypeError} If `offset` or `value` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;\r\n\r\n    /**\r\n     * Reads a 16bit unsigned integer.\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @returns {number} Value read\r\n     * @throws {TypeError} If `offset` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUint16 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 2 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+2+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = 0;\r\n        if (this.littleEndian) {\r\n            value  = this.view[offset  ];\r\n            value |= this.view[offset+1] << 8;\r\n        } else {\r\n            value  = this.view[offset  ] << 8;\r\n            value |= this.view[offset+1];\r\n        }\r\n        if (relative) this.offset += 2;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads a 16bit unsigned integer. This is an alias of {@link ByteBuffer#readUint16}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `2` if omitted.\r\n     * @returns {number} Value read\r\n     * @throws {TypeError} If `offset` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;\r\n\r\n    // types/ints/int32\r\n\r\n    /**\r\n     * Writes a 32bit signed integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeInt32 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value |= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 4;\n        var capacity4 = this.buffer.byteLength;\n        if (offset > capacity4)\n            this.resize((capacity4 *= 2) > offset ? capacity4 : offset);\n        offset -= 4;\n        if (this.littleEndian) {\n            this.view[offset+3] = (value >>> 24) & 0xFF;\n            this.view[offset+2] = (value >>> 16) & 0xFF;\n            this.view[offset+1] = (value >>>  8) & 0xFF;\n            this.view[offset  ] =  value         & 0xFF;\n        } else {\n            this.view[offset  ] = (value >>> 24) & 0xFF;\n            this.view[offset+1] = (value >>> 16) & 0xFF;\n            this.view[offset+2] = (value >>>  8) & 0xFF;\n            this.view[offset+3] =  value         & 0xFF;\n        }\n        if (relative) this.offset += 4;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes a 32bit signed integer. This is an alias of {@link ByteBuffer#writeInt32}.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;\r\n\r\n    /**\r\n     * Reads a 32bit signed integer.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readInt32 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = 0;\r\n        if (this.littleEndian) {\n            value  = this.view[offset+2] << 16;\n            value |= this.view[offset+1] <<  8;\n            value |= this.view[offset  ];\n            value += this.view[offset+3] << 24 >>> 0;\n        } else {\n            value  = this.view[offset+1] << 16;\n            value |= this.view[offset+2] <<  8;\n            value |= this.view[offset+3];\n            value += this.view[offset  ] << 24 >>> 0;\n        }\n        value |= 0; // Cast to signed\r\n        if (relative) this.offset += 4;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads a 32bit signed integer. This is an alias of {@link ByteBuffer#readInt32}.\r\n     * @param {number=} offset Offset to read from. Will use and advance {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;\r\n\r\n    /**\r\n     * Writes a 32bit unsigned integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUint32 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value >>>= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 4;\n        var capacity5 = this.buffer.byteLength;\n        if (offset > capacity5)\n            this.resize((capacity5 *= 2) > offset ? capacity5 : offset);\n        offset -= 4;\n        if (this.littleEndian) {\n            this.view[offset+3] = (value >>> 24) & 0xFF;\n            this.view[offset+2] = (value >>> 16) & 0xFF;\n            this.view[offset+1] = (value >>>  8) & 0xFF;\n            this.view[offset  ] =  value         & 0xFF;\n        } else {\n            this.view[offset  ] = (value >>> 24) & 0xFF;\n            this.view[offset+1] = (value >>> 16) & 0xFF;\n            this.view[offset+2] = (value >>>  8) & 0xFF;\n            this.view[offset+3] =  value         & 0xFF;\n        }\n        if (relative) this.offset += 4;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes a 32bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint32}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;\r\n\r\n    /**\r\n     * Reads a 32bit unsigned integer.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUint32 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = 0;\r\n        if (this.littleEndian) {\n            value  = this.view[offset+2] << 16;\n            value |= this.view[offset+1] <<  8;\n            value |= this.view[offset  ];\n            value += this.view[offset+3] << 24 >>> 0;\n        } else {\n            value  = this.view[offset+1] << 16;\n            value |= this.view[offset+2] <<  8;\n            value |= this.view[offset+3];\n            value += this.view[offset  ] << 24 >>> 0;\n        }\n        if (relative) this.offset += 4;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads a 32bit unsigned integer. This is an alias of {@link ByteBuffer#readUint32}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {number} Value read\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;\r\n\r\n    // types/ints/int64\r\n\r\n    if (Long) {\r\n\r\n        /**\r\n         * Writes a 64bit signed integer.\r\n         * @param {number|!Long} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeInt64 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value);\n                else if (!(value && value instanceof Long))\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            if (typeof value === 'number')\n                value = Long.fromNumber(value);\n            else if (typeof value === 'string')\n                value = Long.fromString(value);\n            offset += 8;\n            var capacity6 = this.buffer.byteLength;\n            if (offset > capacity6)\n                this.resize((capacity6 *= 2) > offset ? capacity6 : offset);\n            offset -= 8;\n            var lo = value.low,\r\n                hi = value.high;\r\n            if (this.littleEndian) {\r\n                this.view[offset+3] = (lo >>> 24) & 0xFF;\n                this.view[offset+2] = (lo >>> 16) & 0xFF;\n                this.view[offset+1] = (lo >>>  8) & 0xFF;\n                this.view[offset  ] =  lo         & 0xFF;\n                offset += 4;\r\n                this.view[offset+3] = (hi >>> 24) & 0xFF;\n                this.view[offset+2] = (hi >>> 16) & 0xFF;\n                this.view[offset+1] = (hi >>>  8) & 0xFF;\n                this.view[offset  ] =  hi         & 0xFF;\n            } else {\r\n                this.view[offset  ] = (hi >>> 24) & 0xFF;\n                this.view[offset+1] = (hi >>> 16) & 0xFF;\n                this.view[offset+2] = (hi >>>  8) & 0xFF;\n                this.view[offset+3] =  hi         & 0xFF;\n                offset += 4;\r\n                this.view[offset  ] = (lo >>> 24) & 0xFF;\n                this.view[offset+1] = (lo >>> 16) & 0xFF;\n                this.view[offset+2] = (lo >>>  8) & 0xFF;\n                this.view[offset+3] =  lo         & 0xFF;\n            }\r\n            if (relative) this.offset += 8;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes a 64bit signed integer. This is an alias of {@link ByteBuffer#writeInt64}.\r\n         * @param {number|!Long} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;\r\n\r\n        /**\r\n         * Reads a 64bit signed integer.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!Long}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readInt64 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n            }\r\n            var lo = 0,\r\n                hi = 0;\r\n            if (this.littleEndian) {\r\n                lo  = this.view[offset+2] << 16;\n                lo |= this.view[offset+1] <<  8;\n                lo |= this.view[offset  ];\n                lo += this.view[offset+3] << 24 >>> 0;\n                offset += 4;\r\n                hi  = this.view[offset+2] << 16;\n                hi |= this.view[offset+1] <<  8;\n                hi |= this.view[offset  ];\n                hi += this.view[offset+3] << 24 >>> 0;\n            } else {\r\n                hi  = this.view[offset+1] << 16;\n                hi |= this.view[offset+2] <<  8;\n                hi |= this.view[offset+3];\n                hi += this.view[offset  ] << 24 >>> 0;\n                offset += 4;\r\n                lo  = this.view[offset+1] << 16;\n                lo |= this.view[offset+2] <<  8;\n                lo |= this.view[offset+3];\n                lo += this.view[offset  ] << 24 >>> 0;\n            }\r\n            var value = new Long(lo, hi, false);\r\n            if (relative) this.offset += 8;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads a 64bit signed integer. This is an alias of {@link ByteBuffer#readInt64}.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!Long}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;\r\n\r\n        /**\r\n         * Writes a 64bit unsigned integer.\r\n         * @param {number|!Long} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeUint64 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value);\n                else if (!(value && value instanceof Long))\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            if (typeof value === 'number')\n                value = Long.fromNumber(value);\n            else if (typeof value === 'string')\n                value = Long.fromString(value);\n            offset += 8;\n            var capacity7 = this.buffer.byteLength;\n            if (offset > capacity7)\n                this.resize((capacity7 *= 2) > offset ? capacity7 : offset);\n            offset -= 8;\n            var lo = value.low,\r\n                hi = value.high;\r\n            if (this.littleEndian) {\r\n                this.view[offset+3] = (lo >>> 24) & 0xFF;\n                this.view[offset+2] = (lo >>> 16) & 0xFF;\n                this.view[offset+1] = (lo >>>  8) & 0xFF;\n                this.view[offset  ] =  lo         & 0xFF;\n                offset += 4;\r\n                this.view[offset+3] = (hi >>> 24) & 0xFF;\n                this.view[offset+2] = (hi >>> 16) & 0xFF;\n                this.view[offset+1] = (hi >>>  8) & 0xFF;\n                this.view[offset  ] =  hi         & 0xFF;\n            } else {\r\n                this.view[offset  ] = (hi >>> 24) & 0xFF;\n                this.view[offset+1] = (hi >>> 16) & 0xFF;\n                this.view[offset+2] = (hi >>>  8) & 0xFF;\n                this.view[offset+3] =  hi         & 0xFF;\n                offset += 4;\r\n                this.view[offset  ] = (lo >>> 24) & 0xFF;\n                this.view[offset+1] = (lo >>> 16) & 0xFF;\n                this.view[offset+2] = (lo >>>  8) & 0xFF;\n                this.view[offset+3] =  lo         & 0xFF;\n            }\r\n            if (relative) this.offset += 8;\n            return this;\r\n        };\r\n\r\n        /**\r\n         * Writes a 64bit unsigned integer. This is an alias of {@link ByteBuffer#writeUint64}.\r\n         * @function\r\n         * @param {number|!Long} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!ByteBuffer} this\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;\r\n\r\n        /**\r\n         * Reads a 64bit unsigned integer.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!Long}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readUint64 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n            }\r\n            var lo = 0,\r\n                hi = 0;\r\n            if (this.littleEndian) {\r\n                lo  = this.view[offset+2] << 16;\n                lo |= this.view[offset+1] <<  8;\n                lo |= this.view[offset  ];\n                lo += this.view[offset+3] << 24 >>> 0;\n                offset += 4;\r\n                hi  = this.view[offset+2] << 16;\n                hi |= this.view[offset+1] <<  8;\n                hi |= this.view[offset  ];\n                hi += this.view[offset+3] << 24 >>> 0;\n            } else {\r\n                hi  = this.view[offset+1] << 16;\n                hi |= this.view[offset+2] <<  8;\n                hi |= this.view[offset+3];\n                hi += this.view[offset  ] << 24 >>> 0;\n                offset += 4;\r\n                lo  = this.view[offset+1] << 16;\n                lo |= this.view[offset+2] <<  8;\n                lo |= this.view[offset+3];\n                lo += this.view[offset  ] << 24 >>> 0;\n            }\r\n            var value = new Long(lo, hi, true);\r\n            if (relative) this.offset += 8;\n            return value;\r\n        };\r\n\r\n        /**\r\n         * Reads a 64bit unsigned integer. This is an alias of {@link ByteBuffer#readUint64}.\r\n         * @function\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n         * @returns {!Long}\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;\r\n\r\n    } // Long\r\n\r\n\r\n    // types/floats/float32\r\n\r\n    /*\r\n     ieee754 - https://github.com/feross/ieee754\r\n\r\n     The MIT License (MIT)\r\n\r\n     Copyright (c) Feross Aboukhadijeh\r\n\r\n     Permission is hereby granted, free of charge, to any person obtaining a copy\r\n     of this software and associated documentation files (the \"Software\"), to deal\r\n     in the Software without restriction, including without limitation the rights\r\n     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n     copies of the Software, and to permit persons to whom the Software is\r\n     furnished to do so, subject to the following conditions:\r\n\r\n     The above copyright notice and this permission notice shall be included in\r\n     all copies or substantial portions of the Software.\r\n\r\n     THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n     THE SOFTWARE.\r\n    */\r\n\r\n    /**\r\n     * Reads an IEEE754 float from a byte array.\r\n     * @param {!Array} buffer\r\n     * @param {number} offset\r\n     * @param {boolean} isLE\r\n     * @param {number} mLen\r\n     * @param {number} nBytes\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    function ieee754_read(buffer, offset, isLE, mLen, nBytes) {\r\n        var e, m,\r\n            eLen = nBytes * 8 - mLen - 1,\r\n            eMax = (1 << eLen) - 1,\r\n            eBias = eMax >> 1,\r\n            nBits = -7,\r\n            i = isLE ? (nBytes - 1) : 0,\r\n            d = isLE ? -1 : 1,\r\n            s = buffer[offset + i];\r\n\r\n        i += d;\r\n\r\n        e = s & ((1 << (-nBits)) - 1);\r\n        s >>= (-nBits);\r\n        nBits += eLen;\r\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n        m = e & ((1 << (-nBits)) - 1);\r\n        e >>= (-nBits);\r\n        nBits += mLen;\r\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\r\n\r\n        if (e === 0) {\r\n            e = 1 - eBias;\r\n        } else if (e === eMax) {\r\n            return m ? NaN : ((s ? -1 : 1) * Infinity);\r\n        } else {\r\n            m = m + Math.pow(2, mLen);\r\n            e = e - eBias;\r\n        }\r\n        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\r\n    }\r\n\r\n    /**\r\n     * Writes an IEEE754 float to a byte array.\r\n     * @param {!Array} buffer\r\n     * @param {number} value\r\n     * @param {number} offset\r\n     * @param {boolean} isLE\r\n     * @param {number} mLen\r\n     * @param {number} nBytes\r\n     * @inner\r\n     */\r\n    function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {\r\n        var e, m, c,\r\n            eLen = nBytes * 8 - mLen - 1,\r\n            eMax = (1 << eLen) - 1,\r\n            eBias = eMax >> 1,\r\n            rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),\r\n            i = isLE ? 0 : (nBytes - 1),\r\n            d = isLE ? 1 : -1,\r\n            s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\r\n\r\n        value = Math.abs(value);\r\n\r\n        if (isNaN(value) || value === Infinity) {\r\n            m = isNaN(value) ? 1 : 0;\r\n            e = eMax;\r\n        } else {\r\n            e = Math.floor(Math.log(value) / Math.LN2);\r\n            if (value * (c = Math.pow(2, -e)) < 1) {\r\n                e--;\r\n                c *= 2;\r\n            }\r\n            if (e + eBias >= 1) {\r\n                value += rt / c;\r\n            } else {\r\n                value += rt * Math.pow(2, 1 - eBias);\r\n            }\r\n            if (value * c >= 2) {\r\n                e++;\r\n                c /= 2;\r\n            }\r\n\r\n            if (e + eBias >= eMax) {\r\n                m = 0;\r\n                e = eMax;\r\n            } else if (e + eBias >= 1) {\r\n                m = (value * c - 1) * Math.pow(2, mLen);\r\n                e = e + eBias;\r\n            } else {\r\n                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\r\n                e = 0;\r\n            }\r\n        }\r\n\r\n        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\r\n\r\n        e = (e << mLen) | m;\r\n        eLen += mLen;\r\n        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\r\n\r\n        buffer[offset + i - d] |= s * 128;\r\n    }\r\n\r\n    /**\r\n     * Writes a 32bit float.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeFloat32 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number')\r\n                throw TypeError(\"Illegal value: \"+value+\" (not a number)\");\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 4;\n        var capacity8 = this.buffer.byteLength;\n        if (offset > capacity8)\n            this.resize((capacity8 *= 2) > offset ? capacity8 : offset);\n        offset -= 4;\n        ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);\r\n        if (relative) this.offset += 4;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes a 32bit float. This is an alias of {@link ByteBuffer#writeFloat32}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;\r\n\r\n    /**\r\n     * Reads a 32bit float.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readFloat32 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);\r\n        if (relative) this.offset += 4;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads a 32bit float. This is an alias of {@link ByteBuffer#readFloat32}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `4` if omitted.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;\r\n\r\n    // types/floats/float64\r\n\r\n    /**\r\n     * Writes a 64bit float.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeFloat64 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number')\r\n                throw TypeError(\"Illegal value: \"+value+\" (not a number)\");\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        offset += 8;\n        var capacity9 = this.buffer.byteLength;\n        if (offset > capacity9)\n            this.resize((capacity9 *= 2) > offset ? capacity9 : offset);\n        offset -= 8;\n        ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);\r\n        if (relative) this.offset += 8;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Writes a 64bit float. This is an alias of {@link ByteBuffer#writeFloat64}.\r\n     * @function\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;\r\n\r\n    /**\r\n     * Reads a 64bit float.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readFloat64 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 8 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+8+\") <= \"+this.buffer.byteLength);\n        }\r\n        var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);\r\n        if (relative) this.offset += 8;\n        return value;\r\n    };\r\n\r\n    /**\r\n     * Reads a 64bit float. This is an alias of {@link ByteBuffer#readFloat64}.\r\n     * @function\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by `8` if omitted.\r\n     * @returns {number}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;\r\n\r\n\r\n    // types/varints/varint32\r\n\r\n    /**\r\n     * Maximum number of bytes required to store a 32bit base 128 variable-length integer.\r\n     * @type {number}\r\n     * @const\r\n     * @expose\r\n     */\r\n    ByteBuffer.MAX_VARINT32_BYTES = 5;\r\n\r\n    /**\r\n     * Calculates the actual number of bytes required to store a 32bit base 128 variable-length integer.\r\n     * @param {number} value Value to encode\r\n     * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT32_BYTES}\r\n     * @expose\r\n     */\r\n    ByteBuffer.calculateVarint32 = function(value) {\r\n        // ref: src/google/protobuf/io/coded_stream.cc\r\n        value = value >>> 0;\r\n             if (value < 1 << 7 ) return 1;\r\n        else if (value < 1 << 14) return 2;\r\n        else if (value < 1 << 21) return 3;\r\n        else if (value < 1 << 28) return 4;\r\n        else                      return 5;\r\n    };\r\n\r\n    /**\r\n     * Zigzag encodes a signed 32bit integer so that it can be effectively used with varint encoding.\r\n     * @param {number} n Signed 32bit integer\r\n     * @returns {number} Unsigned zigzag encoded 32bit integer\r\n     * @expose\r\n     */\r\n    ByteBuffer.zigZagEncode32 = function(n) {\r\n        return (((n |= 0) << 1) ^ (n >> 31)) >>> 0; // ref: src/google/protobuf/wire_format_lite.h\r\n    };\r\n\r\n    /**\r\n     * Decodes a zigzag encoded signed 32bit integer.\r\n     * @param {number} n Unsigned zigzag encoded 32bit integer\r\n     * @returns {number} Signed 32bit integer\r\n     * @expose\r\n     */\r\n    ByteBuffer.zigZagDecode32 = function(n) {\r\n        return ((n >>> 1) ^ -(n & 1)) | 0; // // ref: src/google/protobuf/wire_format_lite.h\r\n    };\r\n\r\n    /**\r\n     * Writes a 32bit base 128 variable-length integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeVarint32 = function(value, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value |= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        var size = ByteBuffer.calculateVarint32(value),\r\n            b;\r\n        offset += size;\n        var capacity10 = this.buffer.byteLength;\n        if (offset > capacity10)\n            this.resize((capacity10 *= 2) > offset ? capacity10 : offset);\n        offset -= size;\n        value >>>= 0;\r\n        while (value >= 0x80) {\r\n            b = (value & 0x7f) | 0x80;\r\n            this.view[offset++] = b;\r\n            value >>>= 7;\r\n        }\r\n        this.view[offset++] = value;\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return this;\r\n        }\r\n        return size;\r\n    };\r\n\r\n    /**\r\n     * Writes a zig-zag encoded (signed) 32bit base 128 variable-length integer.\r\n     * @param {number} value Value to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {!ByteBuffer|number} this if `offset` is omitted, else the actual number of bytes written\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {\r\n        return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);\r\n    };\r\n\r\n    /**\r\n     * Reads a 32bit base 128 variable-length integer.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\r\n     *  and the actual number of bytes read.\r\n     * @throws {Error} If it's not a valid varint. Has a property `truncated = true` if there is not enough data available\r\n     *  to fully decode the varint.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readVarint32 = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n        }\r\n        var c = 0,\r\n            value = 0 >>> 0,\r\n            b;\r\n        do {\r\n            if (!this.noAssert && offset > this.limit) {\r\n                var err = Error(\"Truncated\");\r\n                err['truncated'] = true;\r\n                throw err;\r\n            }\r\n            b = this.view[offset++];\r\n            if (c < 5)\r\n                value |= (b & 0x7f) << (7*c);\r\n            ++c;\r\n        } while ((b & 0x80) !== 0);\r\n        value |= 0;\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return value;\r\n        }\r\n        return {\r\n            \"value\": value,\r\n            \"length\": c\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Reads a zig-zag encoded (signed) 32bit base 128 variable-length integer.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {number|!{value: number, length: number}} The value read if offset is omitted, else the value read\r\n     *  and the actual number of bytes read.\r\n     * @throws {Error} If it's not a valid varint\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readVarint32ZigZag = function(offset) {\r\n        var val = this.readVarint32(offset);\r\n        if (typeof val === 'object')\r\n            val[\"value\"] = ByteBuffer.zigZagDecode32(val[\"value\"]);\r\n        else\r\n            val = ByteBuffer.zigZagDecode32(val);\r\n        return val;\r\n    };\r\n\r\n    // types/varints/varint64\r\n\r\n    if (Long) {\r\n\r\n        /**\r\n         * Maximum number of bytes required to store a 64bit base 128 variable-length integer.\r\n         * @type {number}\r\n         * @const\r\n         * @expose\r\n         */\r\n        ByteBuffer.MAX_VARINT64_BYTES = 10;\r\n\r\n        /**\r\n         * Calculates the actual number of bytes required to store a 64bit base 128 variable-length integer.\r\n         * @param {number|!Long} value Value to encode\r\n         * @returns {number} Number of bytes required. Capped to {@link ByteBuffer.MAX_VARINT64_BYTES}\r\n         * @expose\r\n         */\r\n        ByteBuffer.calculateVarint64 = function(value) {\r\n            if (typeof value === 'number')\n                value = Long.fromNumber(value);\n            else if (typeof value === 'string')\n                value = Long.fromString(value);\n            // ref: src/google/protobuf/io/coded_stream.cc\r\n            var part0 = value.toInt() >>> 0,\r\n                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,\r\n                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;\r\n            if (part2 == 0) {\r\n                if (part1 == 0) {\r\n                    if (part0 < 1 << 14)\r\n                        return part0 < 1 << 7 ? 1 : 2;\r\n                    else\r\n                        return part0 < 1 << 21 ? 3 : 4;\r\n                } else {\r\n                    if (part1 < 1 << 14)\r\n                        return part1 < 1 << 7 ? 5 : 6;\r\n                    else\r\n                        return part1 < 1 << 21 ? 7 : 8;\r\n                }\r\n            } else\r\n                return part2 < 1 << 7 ? 9 : 10;\r\n        };\r\n\r\n        /**\r\n         * Zigzag encodes a signed 64bit integer so that it can be effectively used with varint encoding.\r\n         * @param {number|!Long} value Signed long\r\n         * @returns {!Long} Unsigned zigzag encoded long\r\n         * @expose\r\n         */\r\n        ByteBuffer.zigZagEncode64 = function(value) {\r\n            if (typeof value === 'number')\n                value = Long.fromNumber(value, false);\n            else if (typeof value === 'string')\n                value = Long.fromString(value, false);\n            else if (value.unsigned !== false) value = value.toSigned();\n            // ref: src/google/protobuf/wire_format_lite.h\r\n            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();\r\n        };\r\n\r\n        /**\r\n         * Decodes a zigzag encoded signed 64bit integer.\r\n         * @param {!Long|number} value Unsigned zigzag encoded long or JavaScript number\r\n         * @returns {!Long} Signed long\r\n         * @expose\r\n         */\r\n        ByteBuffer.zigZagDecode64 = function(value) {\r\n            if (typeof value === 'number')\n                value = Long.fromNumber(value, false);\n            else if (typeof value === 'string')\n                value = Long.fromString(value, false);\n            else if (value.unsigned !== false) value = value.toSigned();\n            // ref: src/google/protobuf/wire_format_lite.h\r\n            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();\r\n        };\r\n\r\n        /**\r\n         * Writes a 64bit base 128 variable-length integer.\r\n         * @param {number|Long} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeVarint64 = function(value, offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof value === 'number')\n                    value = Long.fromNumber(value);\n                else if (typeof value === 'string')\n                    value = Long.fromString(value);\n                else if (!(value && value instanceof Long))\n                    throw TypeError(\"Illegal value: \"+value+\" (not an integer or Long)\");\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n            }\r\n            if (typeof value === 'number')\n                value = Long.fromNumber(value, false);\n            else if (typeof value === 'string')\n                value = Long.fromString(value, false);\n            else if (value.unsigned !== false) value = value.toSigned();\n            var size = ByteBuffer.calculateVarint64(value),\r\n                part0 = value.toInt() >>> 0,\r\n                part1 = value.shiftRightUnsigned(28).toInt() >>> 0,\r\n                part2 = value.shiftRightUnsigned(56).toInt() >>> 0;\r\n            offset += size;\n            var capacity11 = this.buffer.byteLength;\n            if (offset > capacity11)\n                this.resize((capacity11 *= 2) > offset ? capacity11 : offset);\n            offset -= size;\n            switch (size) {\r\n                case 10: this.view[offset+9] = (part2 >>>  7) & 0x01;\r\n                case 9 : this.view[offset+8] = size !== 9 ? (part2       ) | 0x80 : (part2       ) & 0x7F;\r\n                case 8 : this.view[offset+7] = size !== 8 ? (part1 >>> 21) | 0x80 : (part1 >>> 21) & 0x7F;\r\n                case 7 : this.view[offset+6] = size !== 7 ? (part1 >>> 14) | 0x80 : (part1 >>> 14) & 0x7F;\r\n                case 6 : this.view[offset+5] = size !== 6 ? (part1 >>>  7) | 0x80 : (part1 >>>  7) & 0x7F;\r\n                case 5 : this.view[offset+4] = size !== 5 ? (part1       ) | 0x80 : (part1       ) & 0x7F;\r\n                case 4 : this.view[offset+3] = size !== 4 ? (part0 >>> 21) | 0x80 : (part0 >>> 21) & 0x7F;\r\n                case 3 : this.view[offset+2] = size !== 3 ? (part0 >>> 14) | 0x80 : (part0 >>> 14) & 0x7F;\r\n                case 2 : this.view[offset+1] = size !== 2 ? (part0 >>>  7) | 0x80 : (part0 >>>  7) & 0x7F;\r\n                case 1 : this.view[offset  ] = size !== 1 ? (part0       ) | 0x80 : (part0       ) & 0x7F;\r\n            }\r\n            if (relative) {\r\n                this.offset += size;\r\n                return this;\r\n            } else {\r\n                return size;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Writes a zig-zag encoded 64bit base 128 variable-length integer.\r\n         * @param {number|Long} value Value to write\r\n         * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  written if omitted.\r\n         * @returns {!ByteBuffer|number} `this` if offset is omitted, else the actual number of bytes written.\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {\r\n            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);\r\n        };\r\n\r\n        /**\r\n         * Reads a 64bit base 128 variable-length integer. Requires Long.js.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\r\n         *  the actual number of bytes read.\r\n         * @throws {Error} If it's not a valid varint\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readVarint64 = function(offset) {\r\n            var relative = typeof offset === 'undefined';\n            if (relative) offset = this.offset;\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n            }\r\n            // ref: src/google/protobuf/io/coded_stream.cc\r\n            var start = offset,\r\n                part0 = 0,\r\n                part1 = 0,\r\n                part2 = 0,\r\n                b  = 0;\r\n            b = this.view[offset++]; part0  = (b & 0x7F)      ; if ( b & 0x80                                                   ) {\r\n            b = this.view[offset++]; part0 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part0 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part0 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part1  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part1 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part1 |= (b & 0x7F) << 14; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part1 |= (b & 0x7F) << 21; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part2  = (b & 0x7F)      ; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            b = this.view[offset++]; part2 |= (b & 0x7F) <<  7; if ((b & 0x80) || (this.noAssert && typeof b === 'undefined')) {\r\n            throw Error(\"Buffer overrun\"); }}}}}}}}}}\r\n            var value = Long.fromBits(part0 | (part1 << 28), (part1 >>> 4) | (part2) << 24, false);\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return value;\r\n            } else {\r\n                return {\r\n                    'value': value,\r\n                    'length': offset-start\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Reads a zig-zag encoded 64bit base 128 variable-length integer. Requires Long.js.\r\n         * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n         *  read if omitted.\r\n         * @returns {!Long|!{value: Long, length: number}} The value read if offset is omitted, else the value read and\r\n         *  the actual number of bytes read.\r\n         * @throws {Error} If it's not a valid varint\r\n         * @expose\r\n         */\r\n        ByteBufferPrototype.readVarint64ZigZag = function(offset) {\r\n            var val = this.readVarint64(offset);\r\n            if (val && val['value'] instanceof Long)\r\n                val[\"value\"] = ByteBuffer.zigZagDecode64(val[\"value\"]);\r\n            else\r\n                val = ByteBuffer.zigZagDecode64(val);\r\n            return val;\r\n        };\r\n\r\n    } // Long\r\n\r\n\r\n    // types/strings/cstring\r\n\r\n    /**\r\n     * Writes a NULL-terminated UTF8 encoded string. For this to work the specified string must not contain any NULL\r\n     *  characters itself.\r\n     * @param {string} str String to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  contained in `str` + 1 if omitted.\r\n     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeCString = function(str, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        var i,\r\n            k = str.length;\r\n        if (!this.noAssert) {\r\n            if (typeof str !== 'string')\r\n                throw TypeError(\"Illegal str: Not a string\");\r\n            for (i=0; i<k; ++i) {\r\n                if (str.charCodeAt(i) === 0)\r\n                    throw RangeError(\"Illegal str: Contains NULL-characters\");\r\n            }\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        // UTF8 strings do not contain zero bytes in between except for the zero character, so:\r\n        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];\r\n        offset += k+1;\n        var capacity12 = this.buffer.byteLength;\n        if (offset > capacity12)\n            this.resize((capacity12 *= 2) > offset ? capacity12 : offset);\n        offset -= k+1;\n        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n            this.view[offset++] = b;\r\n        }.bind(this));\r\n        this.view[offset++] = 0;\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return this;\r\n        }\r\n        return k;\r\n    };\r\n\r\n    /**\r\n     * Reads a NULL-terminated UTF8 encoded string. For this to work the string read must not contain any NULL characters\r\n     *  itself.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  read if omitted.\r\n     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n     *  read and the actual number of bytes read.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readCString = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n        }\r\n        var start = offset,\r\n            temp;\r\n        // UTF8 strings do not contain zero bytes in between except for the zero character itself, so:\r\n        var sd, b = -1;\r\n        utfx.decodeUTF8toUTF16(function() {\r\n            if (b === 0) return null;\r\n            if (offset >= this.limit)\r\n                throw RangeError(\"Illegal range: Truncated data, \"+offset+\" < \"+this.limit);\r\n            b = this.view[offset++];\r\n            return b === 0 ? null : b;\r\n        }.bind(this), sd = stringDestination(), true);\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return sd();\r\n        } else {\r\n            return {\r\n                \"string\": sd(),\r\n                \"length\": offset - start\r\n            };\r\n        }\r\n    };\r\n\r\n    // types/strings/istring\r\n\r\n    /**\r\n     * Writes a length as uint32 prefixed UTF8 encoded string.\r\n     * @param {string} str String to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\r\n     * @expose\r\n     * @see ByteBuffer#writeVarint32\r\n     */\r\n    ByteBufferPrototype.writeIString = function(str, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof str !== 'string')\r\n                throw TypeError(\"Illegal str: Not a string\");\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        var start = offset,\r\n            k;\r\n        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];\r\n        offset += 4+k;\n        var capacity13 = this.buffer.byteLength;\n        if (offset > capacity13)\n            this.resize((capacity13 *= 2) > offset ? capacity13 : offset);\n        offset -= 4+k;\n        if (this.littleEndian) {\n            this.view[offset+3] = (k >>> 24) & 0xFF;\n            this.view[offset+2] = (k >>> 16) & 0xFF;\n            this.view[offset+1] = (k >>>  8) & 0xFF;\n            this.view[offset  ] =  k         & 0xFF;\n        } else {\n            this.view[offset  ] = (k >>> 24) & 0xFF;\n            this.view[offset+1] = (k >>> 16) & 0xFF;\n            this.view[offset+2] = (k >>>  8) & 0xFF;\n            this.view[offset+3] =  k         & 0xFF;\n        }\n        offset += 4;\r\n        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n            this.view[offset++] = b;\r\n        }.bind(this));\r\n        if (offset !== start + 4 + k)\r\n            throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+4+k));\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return this;\r\n        }\r\n        return offset - start;\r\n    };\r\n\r\n    /**\r\n     * Reads a length as uint32 prefixed UTF8 encoded string.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  read if omitted.\r\n     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n     *  read and the actual number of bytes read.\r\n     * @expose\r\n     * @see ByteBuffer#readVarint32\r\n     */\r\n    ByteBufferPrototype.readIString = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 4 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+4+\") <= \"+this.buffer.byteLength);\n        }\r\n        var start = offset;\r\n        var len = this.readUint32(offset);\r\n        var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);\r\n        offset += str['length'];\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return str['string'];\r\n        } else {\r\n            return {\r\n                'string': str['string'],\r\n                'length': offset - start\r\n            };\r\n        }\r\n    };\r\n\r\n    // types/strings/utf8string\r\n\r\n    /**\r\n     * Metrics representing number of UTF8 characters. Evaluates to `c`.\r\n     * @type {string}\r\n     * @const\r\n     * @expose\r\n     */\r\n    ByteBuffer.METRICS_CHARS = 'c';\r\n\r\n    /**\r\n     * Metrics representing number of bytes. Evaluates to `b`.\r\n     * @type {string}\r\n     * @const\r\n     * @expose\r\n     */\r\n    ByteBuffer.METRICS_BYTES = 'b';\r\n\r\n    /**\r\n     * Writes an UTF8 encoded string.\r\n     * @param {string} str String to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\r\n     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeUTF8String = function(str, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        var k;\r\n        var start = offset;\r\n        k = utfx.calculateUTF16asUTF8(stringSource(str))[1];\r\n        offset += k;\n        var capacity14 = this.buffer.byteLength;\n        if (offset > capacity14)\n            this.resize((capacity14 *= 2) > offset ? capacity14 : offset);\n        offset -= k;\n        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n            this.view[offset++] = b;\r\n        }.bind(this));\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return this;\r\n        }\r\n        return offset - start;\r\n    };\r\n\r\n    /**\r\n     * Writes an UTF8 encoded string. This is an alias of {@link ByteBuffer#writeUTF8String}.\r\n     * @function\r\n     * @param {string} str String to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} if omitted.\r\n     * @returns {!ByteBuffer|number} this if offset is omitted, else the actual number of bytes written.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;\r\n\r\n    /**\r\n     * Calculates the number of UTF8 characters of a string. JavaScript itself uses UTF-16, so that a string's\r\n     *  `length` property does not reflect its actual UTF8 size if it contains code points larger than 0xFFFF.\r\n     * @param {string} str String to calculate\r\n     * @returns {number} Number of UTF8 characters\r\n     * @expose\r\n     */\r\n    ByteBuffer.calculateUTF8Chars = function(str) {\r\n        return utfx.calculateUTF16asUTF8(stringSource(str))[0];\r\n    };\r\n\r\n    /**\r\n     * Calculates the number of UTF8 bytes of a string.\r\n     * @param {string} str String to calculate\r\n     * @returns {number} Number of UTF8 bytes\r\n     * @expose\r\n     */\r\n    ByteBuffer.calculateUTF8Bytes = function(str) {\r\n        return utfx.calculateUTF16asUTF8(stringSource(str))[1];\r\n    };\r\n\r\n    /**\r\n     * Calculates the number of UTF8 bytes of a string. This is an alias of {@link ByteBuffer.calculateUTF8Bytes}.\r\n     * @function\r\n     * @param {string} str String to calculate\r\n     * @returns {number} Number of UTF8 bytes\r\n     * @expose\r\n     */\r\n    ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;\r\n\r\n    /**\r\n     * Reads an UTF8 encoded string.\r\n     * @param {number} length Number of characters or bytes to read.\r\n     * @param {string=} metrics Metrics specifying what `length` is meant to count. Defaults to\r\n     *  {@link ByteBuffer.METRICS_CHARS}.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  read if omitted.\r\n     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n     *  read and the actual number of bytes read.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {\r\n        if (typeof metrics === 'number') {\r\n            offset = metrics;\r\n            metrics = undefined;\r\n        }\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (typeof metrics === 'undefined') metrics = ByteBuffer.METRICS_CHARS;\r\n        if (!this.noAssert) {\r\n            if (typeof length !== 'number' || length % 1 !== 0)\n                throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");\n            length |= 0;\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        var i = 0,\r\n            start = offset,\r\n            sd;\r\n        if (metrics === ByteBuffer.METRICS_CHARS) { // The same for node and the browser\r\n            sd = stringDestination();\r\n            utfx.decodeUTF8(function() {\r\n                return i < length && offset < this.limit ? this.view[offset++] : null;\r\n            }.bind(this), function(cp) {\r\n                ++i; utfx.UTF8toUTF16(cp, sd);\r\n            });\r\n            if (i !== length)\r\n                throw RangeError(\"Illegal range: Truncated data, \"+i+\" == \"+length);\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return sd();\r\n            } else {\r\n                return {\r\n                    \"string\": sd(),\r\n                    \"length\": offset - start\r\n                };\r\n            }\r\n        } else if (metrics === ByteBuffer.METRICS_BYTES) {\r\n            if (!this.noAssert) {\r\n                if (typeof offset !== 'number' || offset % 1 !== 0)\n                    throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n                offset >>>= 0;\n                if (offset < 0 || offset + length > this.buffer.byteLength)\n                    throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+length+\") <= \"+this.buffer.byteLength);\n            }\r\n            var k = offset + length;\r\n            utfx.decodeUTF8toUTF16(function() {\r\n                return offset < k ? this.view[offset++] : null;\r\n            }.bind(this), sd = stringDestination(), this.noAssert);\r\n            if (offset !== k)\r\n                throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+k);\r\n            if (relative) {\r\n                this.offset = offset;\r\n                return sd();\r\n            } else {\r\n                return {\r\n                    'string': sd(),\r\n                    'length': offset - start\r\n                };\r\n            }\r\n        } else\r\n            throw TypeError(\"Unsupported metrics: \"+metrics);\r\n    };\r\n\r\n    /**\r\n     * Reads an UTF8 encoded string. This is an alias of {@link ByteBuffer#readUTF8String}.\r\n     * @function\r\n     * @param {number} length Number of characters or bytes to read\r\n     * @param {number=} metrics Metrics specifying what `n` is meant to count. Defaults to\r\n     *  {@link ByteBuffer.METRICS_CHARS}.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  read if omitted.\r\n     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n     *  read and the actual number of bytes read.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;\r\n\r\n    // types/strings/vstring\r\n\r\n    /**\r\n     * Writes a length as varint32 prefixed UTF8 encoded string.\r\n     * @param {string} str String to write\r\n     * @param {number=} offset Offset to write to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {!ByteBuffer|number} `this` if `offset` is omitted, else the actual number of bytes written\r\n     * @expose\r\n     * @see ByteBuffer#writeVarint32\r\n     */\r\n    ByteBufferPrototype.writeVString = function(str, offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof str !== 'string')\r\n                throw TypeError(\"Illegal str: Not a string\");\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        var start = offset,\r\n            k, l;\r\n        k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];\r\n        l = ByteBuffer.calculateVarint32(k);\r\n        offset += l+k;\n        var capacity15 = this.buffer.byteLength;\n        if (offset > capacity15)\n            this.resize((capacity15 *= 2) > offset ? capacity15 : offset);\n        offset -= l+k;\n        offset += this.writeVarint32(k, offset);\r\n        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n            this.view[offset++] = b;\r\n        }.bind(this));\r\n        if (offset !== start+k+l)\r\n            throw RangeError(\"Illegal range: Truncated data, \"+offset+\" == \"+(offset+k+l));\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return this;\r\n        }\r\n        return offset - start;\r\n    };\r\n\r\n    /**\r\n     * Reads a length as varint32 prefixed UTF8 encoded string.\r\n     * @param {number=} offset Offset to read from. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  read if omitted.\r\n     * @returns {string|!{string: string, length: number}} The string read if offset is omitted, else the string\r\n     *  read and the actual number of bytes read.\r\n     * @expose\r\n     * @see ByteBuffer#readVarint32\r\n     */\r\n    ByteBufferPrototype.readVString = function(offset) {\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 1 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+1+\") <= \"+this.buffer.byteLength);\n        }\r\n        var start = offset;\r\n        var len = this.readVarint32(offset);\r\n        var str = this.readUTF8String(len['value'], ByteBuffer.METRICS_BYTES, offset += len['length']);\r\n        offset += str['length'];\r\n        if (relative) {\r\n            this.offset = offset;\r\n            return str['string'];\r\n        } else {\r\n            return {\r\n                'string': str['string'],\r\n                'length': offset - start\r\n            };\r\n        }\r\n    };\r\n\r\n\r\n    /**\r\n     * Appends some data to this ByteBuffer. This will overwrite any contents behind the specified offset up to the appended\r\n     *  data's length.\r\n     * @param {!ByteBuffer|!ArrayBuffer|!Uint8Array|string} source Data to append. If `source` is a ByteBuffer, its offsets\r\n     *  will be modified according to the performed read operation.\r\n     * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\r\n     * @param {number=} offset Offset to append at. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     * @example A relative `<01 02>03.append(<04 05>)` will result in `<01 02 04 05>, 04 05|`\r\n     * @example An absolute `<01 02>03.append(04 05>, 1)` will result in `<01 04>05, 04 05|`\r\n     */\r\n    ByteBufferPrototype.append = function(source, encoding, offset) {\r\n        if (typeof encoding === 'number' || typeof encoding !== 'string') {\r\n            offset = encoding;\r\n            encoding = undefined;\r\n        }\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        if (!(source instanceof ByteBuffer))\r\n            source = ByteBuffer.wrap(source, encoding);\r\n        var length = source.limit - source.offset;\r\n        if (length <= 0) return this; // Nothing to append\r\n        offset += length;\n        var capacity16 = this.buffer.byteLength;\n        if (offset > capacity16)\n            this.resize((capacity16 *= 2) > offset ? capacity16 : offset);\n        offset -= length;\n        this.view.set(source.view.subarray(source.offset, source.limit), offset);\r\n        source.offset += length;\r\n        if (relative) this.offset += length;\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Appends this ByteBuffer's contents to another ByteBuffer. This will overwrite any contents at and after the\r\n        specified offset up to the length of this ByteBuffer's data.\r\n     * @param {!ByteBuffer} target Target ByteBuffer\r\n     * @param {number=} offset Offset to append to. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  read if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     * @see ByteBuffer#append\r\n     */\r\n    ByteBufferPrototype.appendTo = function(target, offset) {\r\n        target.append(this, offset);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Enables or disables assertions of argument types and offsets. Assertions are enabled by default but you can opt to\r\n     *  disable them if your code already makes sure that everything is valid.\r\n     * @param {boolean} assert `true` to enable assertions, otherwise `false`\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.assert = function(assert) {\r\n        this.noAssert = !assert;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Gets the capacity of this ByteBuffer's backing buffer.\r\n     * @returns {number} Capacity of the backing buffer\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.capacity = function() {\r\n        return this.buffer.byteLength;\r\n    };\r\n    /**\r\n     * Clears this ByteBuffer's offsets by setting {@link ByteBuffer#offset} to `0` and {@link ByteBuffer#limit} to the\r\n     *  backing buffer's capacity. Discards {@link ByteBuffer#markedOffset}.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.clear = function() {\r\n        this.offset = 0;\r\n        this.limit = this.buffer.byteLength;\r\n        this.markedOffset = -1;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Creates a cloned instance of this ByteBuffer, preset with this ByteBuffer's values for {@link ByteBuffer#offset},\r\n     *  {@link ByteBuffer#markedOffset} and {@link ByteBuffer#limit}.\r\n     * @param {boolean=} copy Whether to copy the backing buffer or to return another view on the same, defaults to `false`\r\n     * @returns {!ByteBuffer} Cloned instance\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.clone = function(copy) {\r\n        var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);\r\n        if (copy) {\r\n            bb.buffer = new ArrayBuffer(this.buffer.byteLength);\r\n            bb.view = new Uint8Array(bb.buffer);\r\n        } else {\r\n            bb.buffer = this.buffer;\r\n            bb.view = this.view;\r\n        }\r\n        bb.offset = this.offset;\r\n        bb.markedOffset = this.markedOffset;\r\n        bb.limit = this.limit;\r\n        return bb;\r\n    };\r\n\r\n    /**\r\n     * Compacts this ByteBuffer to be backed by a {@link ByteBuffer#buffer} of its contents' length. Contents are the bytes\r\n     *  between {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. Will set `offset = 0` and `limit = capacity` and\r\n     *  adapt {@link ByteBuffer#markedOffset} to the same relative position if set.\r\n     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\r\n     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.compact = function(begin, end) {\r\n        if (typeof begin === 'undefined') begin = this.offset;\r\n        if (typeof end === 'undefined') end = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        if (begin === 0 && end === this.buffer.byteLength)\r\n            return this; // Already compacted\r\n        var len = end - begin;\r\n        if (len === 0) {\r\n            this.buffer = EMPTY_BUFFER;\r\n            this.view = null;\r\n            if (this.markedOffset >= 0) this.markedOffset -= begin;\r\n            this.offset = 0;\r\n            this.limit = 0;\r\n            return this;\r\n        }\r\n        var buffer = new ArrayBuffer(len);\r\n        var view = new Uint8Array(buffer);\r\n        view.set(this.view.subarray(begin, end));\r\n        this.buffer = buffer;\r\n        this.view = view;\r\n        if (this.markedOffset >= 0) this.markedOffset -= begin;\r\n        this.offset = 0;\r\n        this.limit = len;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Creates a copy of this ByteBuffer's contents. Contents are the bytes between {@link ByteBuffer#offset} and\r\n     *  {@link ByteBuffer#limit}.\r\n     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\r\n     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\r\n     * @returns {!ByteBuffer} Copy\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.copy = function(begin, end) {\r\n        if (typeof begin === 'undefined') begin = this.offset;\r\n        if (typeof end === 'undefined') end = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        if (begin === end)\r\n            return new ByteBuffer(0, this.littleEndian, this.noAssert);\r\n        var capacity = end - begin,\r\n            bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);\r\n        bb.offset = 0;\r\n        bb.limit = capacity;\r\n        if (bb.markedOffset >= 0) bb.markedOffset -= begin;\r\n        this.copyTo(bb, 0, begin, end);\r\n        return bb;\r\n    };\r\n\r\n    /**\r\n     * Copies this ByteBuffer's contents to another ByteBuffer. Contents are the bytes between {@link ByteBuffer#offset} and\r\n     *  {@link ByteBuffer#limit}.\r\n     * @param {!ByteBuffer} target Target ByteBuffer\r\n     * @param {number=} targetOffset Offset to copy to. Will use and increase the target's {@link ByteBuffer#offset}\r\n     *  by the number of bytes copied if omitted.\r\n     * @param {number=} sourceOffset Offset to start copying from. Will use and increase {@link ByteBuffer#offset} by the\r\n     *  number of bytes copied if omitted.\r\n     * @param {number=} sourceLimit Offset to end copying from, defaults to {@link ByteBuffer#limit}\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {\r\n        var relative,\r\n            targetRelative;\r\n        if (!this.noAssert) {\r\n            if (!ByteBuffer.isByteBuffer(target))\r\n                throw TypeError(\"Illegal target: Not a ByteBuffer\");\r\n        }\r\n        targetOffset = (targetRelative = typeof targetOffset === 'undefined') ? target.offset : targetOffset | 0;\r\n        sourceOffset = (relative = typeof sourceOffset === 'undefined') ? this.offset : sourceOffset | 0;\r\n        sourceLimit = typeof sourceLimit === 'undefined' ? this.limit : sourceLimit | 0;\r\n\r\n        if (targetOffset < 0 || targetOffset > target.buffer.byteLength)\r\n            throw RangeError(\"Illegal target range: 0 <= \"+targetOffset+\" <= \"+target.buffer.byteLength);\r\n        if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)\r\n            throw RangeError(\"Illegal source range: 0 <= \"+sourceOffset+\" <= \"+this.buffer.byteLength);\r\n\r\n        var len = sourceLimit - sourceOffset;\r\n        if (len === 0)\r\n            return target; // Nothing to copy\r\n\r\n        target.ensureCapacity(targetOffset + len);\r\n\r\n        target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);\r\n\r\n        if (relative) this.offset += len;\r\n        if (targetRelative) target.offset += len;\r\n\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Makes sure that this ByteBuffer is backed by a {@link ByteBuffer#buffer} of at least the specified capacity. If the\r\n     *  current capacity is exceeded, it will be doubled. If double the current capacity is less than the required capacity,\r\n     *  the required capacity will be used instead.\r\n     * @param {number} capacity Required capacity\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.ensureCapacity = function(capacity) {\r\n        var current = this.buffer.byteLength;\r\n        if (current < capacity)\r\n            return this.resize((current *= 2) > capacity ? current : capacity);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Overwrites this ByteBuffer's contents with the specified value. Contents are the bytes between\r\n     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.\r\n     * @param {number|string} value Byte value to fill with. If given as a string, the first character is used.\r\n     * @param {number=} begin Begin offset. Will use and increase {@link ByteBuffer#offset} by the number of bytes\r\n     *  written if omitted. defaults to {@link ByteBuffer#offset}.\r\n     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     * @example `someByteBuffer.clear().fill(0)` fills the entire backing buffer with zeroes\r\n     */\r\n    ByteBufferPrototype.fill = function(value, begin, end) {\r\n        var relative = typeof begin === 'undefined';\n        if (relative) begin = this.offset;\n        if (typeof value === 'string' && value.length > 0)\r\n            value = value.charCodeAt(0);\r\n        if (typeof begin === 'undefined') begin = this.offset;\r\n        if (typeof end === 'undefined') end = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof value !== 'number' || value % 1 !== 0)\n                throw TypeError(\"Illegal value: \"+value+\" (not an integer)\");\n            value |= 0;\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        if (begin >= end)\r\n            return this; // Nothing to fill\r\n        while (begin < end) this.view[begin++] = value;\r\n        if (relative) this.offset = begin;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Makes this ByteBuffer ready for a new sequence of write or relative read operations. Sets `limit = offset` and\r\n     *  `offset = 0`. Make sure always to flip a ByteBuffer when all relative read or write operations are complete.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.flip = function() {\r\n        this.limit = this.offset;\r\n        this.offset = 0;\r\n        return this;\r\n    };\r\n    /**\r\n     * Marks an offset on this ByteBuffer to be used later.\r\n     * @param {number=} offset Offset to mark. Defaults to {@link ByteBuffer#offset}.\r\n     * @returns {!ByteBuffer} this\r\n     * @throws {TypeError} If `offset` is not a valid number\r\n     * @throws {RangeError} If `offset` is out of bounds\r\n     * @see ByteBuffer#reset\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.mark = function(offset) {\r\n        offset = typeof offset === 'undefined' ? this.offset : offset;\r\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        this.markedOffset = offset;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the byte order.\r\n     * @param {boolean} littleEndian `true` for little endian byte order, `false` for big endian\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.order = function(littleEndian) {\r\n        if (!this.noAssert) {\r\n            if (typeof littleEndian !== 'boolean')\r\n                throw TypeError(\"Illegal littleEndian: Not a boolean\");\r\n        }\r\n        this.littleEndian = !!littleEndian;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Switches (to) little endian byte order.\r\n     * @param {boolean=} littleEndian Defaults to `true`, otherwise uses big endian\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.LE = function(littleEndian) {\r\n        this.littleEndian = typeof littleEndian !== 'undefined' ? !!littleEndian : true;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Switches (to) big endian byte order.\r\n     * @param {boolean=} bigEndian Defaults to `true`, otherwise uses little endian\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.BE = function(bigEndian) {\r\n        this.littleEndian = typeof bigEndian !== 'undefined' ? !bigEndian : false;\r\n        return this;\r\n    };\r\n    /**\r\n     * Prepends some data to this ByteBuffer. This will overwrite any contents before the specified offset up to the\r\n     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\r\n     *  will be resized and its contents moved accordingly.\r\n     * @param {!ByteBuffer|string|!ArrayBuffer} source Data to prepend. If `source` is a ByteBuffer, its offset will be\r\n     *  modified according to the performed read operation.\r\n     * @param {(string|number)=} encoding Encoding if `data` is a string (\"base64\", \"hex\", \"binary\", defaults to \"utf8\")\r\n     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\r\n     *  prepended if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     * @example A relative `00<01 02 03>.prepend(<04 05>)` results in `<04 05 01 02 03>, 04 05|`\r\n     * @example An absolute `00<01 02 03>.prepend(<04 05>, 2)` results in `04<05 02 03>, 04 05|`\r\n     */\r\n    ByteBufferPrototype.prepend = function(source, encoding, offset) {\r\n        if (typeof encoding === 'number' || typeof encoding !== 'string') {\r\n            offset = encoding;\r\n            encoding = undefined;\r\n        }\r\n        var relative = typeof offset === 'undefined';\n        if (relative) offset = this.offset;\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: \"+offset+\" (not an integer)\");\n            offset >>>= 0;\n            if (offset < 0 || offset + 0 > this.buffer.byteLength)\n                throw RangeError(\"Illegal offset: 0 <= \"+offset+\" (+\"+0+\") <= \"+this.buffer.byteLength);\n        }\r\n        if (!(source instanceof ByteBuffer))\r\n            source = ByteBuffer.wrap(source, encoding);\r\n        var len = source.limit - source.offset;\r\n        if (len <= 0) return this; // Nothing to prepend\r\n        var diff = len - offset;\r\n        if (diff > 0) { // Not enough space before offset, so resize + move\r\n            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);\r\n            var view = new Uint8Array(buffer);\r\n            view.set(this.view.subarray(offset, this.buffer.byteLength), len);\r\n            this.buffer = buffer;\r\n            this.view = view;\r\n            this.offset += diff;\r\n            if (this.markedOffset >= 0) this.markedOffset += diff;\r\n            this.limit += diff;\r\n            offset += diff;\r\n        } else {\r\n            var arrayView = new Uint8Array(this.buffer);\r\n        }\r\n        this.view.set(source.view.subarray(source.offset, source.limit), offset - len);\r\n\r\n        source.offset = source.limit;\r\n        if (relative)\r\n            this.offset -= len;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Prepends this ByteBuffer to another ByteBuffer. This will overwrite any contents before the specified offset up to the\r\n     *  prepended data's length. If there is not enough space available before the specified `offset`, the backing buffer\r\n     *  will be resized and its contents moved accordingly.\r\n     * @param {!ByteBuffer} target Target ByteBuffer\r\n     * @param {number=} offset Offset to prepend at. Will use and decrease {@link ByteBuffer#offset} by the number of bytes\r\n     *  prepended if omitted.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     * @see ByteBuffer#prepend\r\n     */\r\n    ByteBufferPrototype.prependTo = function(target, offset) {\r\n        target.prepend(this, offset);\r\n        return this;\r\n    };\r\n    /**\r\n     * Prints debug information about this ByteBuffer's contents.\r\n     * @param {function(string)=} out Output function to call, defaults to console.log\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.printDebug = function(out) {\r\n        if (typeof out !== 'function') out = console.log.bind(console);\r\n        out(\r\n            this.toString()+\"\\n\"+\r\n            \"-------------------------------------------------------------------\\n\"+\r\n            this.toDebug(/* columns */ true)\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Gets the number of remaining readable bytes. Contents are the bytes between {@link ByteBuffer#offset} and\r\n     *  {@link ByteBuffer#limit}, so this returns `limit - offset`.\r\n     * @returns {number} Remaining readable bytes. May be negative if `offset > limit`.\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.remaining = function() {\r\n        return this.limit - this.offset;\r\n    };\r\n    /**\r\n     * Resets this ByteBuffer's {@link ByteBuffer#offset}. If an offset has been marked through {@link ByteBuffer#mark}\r\n     *  before, `offset` will be set to {@link ByteBuffer#markedOffset}, which will then be discarded. If no offset has been\r\n     *  marked, sets `offset = 0`.\r\n     * @returns {!ByteBuffer} this\r\n     * @see ByteBuffer#mark\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.reset = function() {\r\n        if (this.markedOffset >= 0) {\r\n            this.offset = this.markedOffset;\r\n            this.markedOffset = -1;\r\n        } else {\r\n            this.offset = 0;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Resizes this ByteBuffer to be backed by a buffer of at least the given capacity. Will do nothing if already that\r\n     *  large or larger.\r\n     * @param {number} capacity Capacity required\r\n     * @returns {!ByteBuffer} this\r\n     * @throws {TypeError} If `capacity` is not a number\r\n     * @throws {RangeError} If `capacity < 0`\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.resize = function(capacity) {\r\n        if (!this.noAssert) {\r\n            if (typeof capacity !== 'number' || capacity % 1 !== 0)\n                throw TypeError(\"Illegal capacity: \"+capacity+\" (not an integer)\");\n            capacity |= 0;\n            if (capacity < 0)\r\n                throw RangeError(\"Illegal capacity: 0 <= \"+capacity);\r\n        }\r\n        if (this.buffer.byteLength < capacity) {\r\n            var buffer = new ArrayBuffer(capacity);\r\n            var view = new Uint8Array(buffer);\r\n            view.set(this.view);\r\n            this.buffer = buffer;\r\n            this.view = view;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Reverses this ByteBuffer's contents.\r\n     * @param {number=} begin Offset to start at, defaults to {@link ByteBuffer#offset}\r\n     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.reverse = function(begin, end) {\r\n        if (typeof begin === 'undefined') begin = this.offset;\r\n        if (typeof end === 'undefined') end = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        if (begin === end)\r\n            return this; // Nothing to reverse\r\n        Array.prototype.reverse.call(this.view.subarray(begin, end));\r\n        return this;\r\n    };\r\n    /**\r\n     * Skips the next `length` bytes. This will just advance\r\n     * @param {number} length Number of bytes to skip. May also be negative to move the offset back.\r\n     * @returns {!ByteBuffer} this\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.skip = function(length) {\r\n        if (!this.noAssert) {\r\n            if (typeof length !== 'number' || length % 1 !== 0)\n                throw TypeError(\"Illegal length: \"+length+\" (not an integer)\");\n            length |= 0;\n        }\r\n        var offset = this.offset + length;\r\n        if (!this.noAssert) {\r\n            if (offset < 0 || offset > this.buffer.byteLength)\r\n                throw RangeError(\"Illegal length: 0 <= \"+this.offset+\" + \"+length+\" <= \"+this.buffer.byteLength);\r\n        }\r\n        this.offset = offset;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Slices this ByteBuffer by creating a cloned instance with `offset = begin` and `limit = end`.\r\n     * @param {number=} begin Begin offset, defaults to {@link ByteBuffer#offset}.\r\n     * @param {number=} end End offset, defaults to {@link ByteBuffer#limit}.\r\n     * @returns {!ByteBuffer} Clone of this ByteBuffer with slicing applied, backed by the same {@link ByteBuffer#buffer}\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.slice = function(begin, end) {\r\n        if (typeof begin === 'undefined') begin = this.offset;\r\n        if (typeof end === 'undefined') end = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        var bb = this.clone();\r\n        bb.offset = begin;\r\n        bb.limit = end;\r\n        return bb;\r\n    };\r\n    /**\r\n     * Returns a copy of the backing buffer that contains this ByteBuffer's contents. Contents are the bytes between\r\n     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}.\r\n     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory if\r\n     *  possible. Defaults to `false`\r\n     * @returns {!ArrayBuffer} Contents as an ArrayBuffer\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toBuffer = function(forceCopy) {\r\n        var offset = this.offset,\r\n            limit = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof offset !== 'number' || offset % 1 !== 0)\n                throw TypeError(\"Illegal offset: Not an integer\");\n            offset >>>= 0;\n            if (typeof limit !== 'number' || limit % 1 !== 0)\n                throw TypeError(\"Illegal limit: Not an integer\");\n            limit >>>= 0;\n            if (offset < 0 || offset > limit || limit > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+offset+\" <= \"+limit+\" <= \"+this.buffer.byteLength);\n        }\r\n        // NOTE: It's not possible to have another ArrayBuffer reference the same memory as the backing buffer. This is\r\n        // possible with Uint8Array#subarray only, but we have to return an ArrayBuffer by contract. So:\r\n        if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)\r\n            return this.buffer;\r\n        if (offset === limit)\r\n            return EMPTY_BUFFER;\r\n        var buffer = new ArrayBuffer(limit - offset);\r\n        new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);\r\n        return buffer;\r\n    };\r\n\r\n    /**\r\n     * Returns a raw buffer compacted to contain this ByteBuffer's contents. Contents are the bytes between\r\n     *  {@link ByteBuffer#offset} and {@link ByteBuffer#limit}. This is an alias of {@link ByteBuffer#toBuffer}.\r\n     * @function\r\n     * @param {boolean=} forceCopy If `true` returns a copy, otherwise returns a view referencing the same memory.\r\n     *  Defaults to `false`\r\n     * @returns {!ArrayBuffer} Contents as an ArrayBuffer\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;\r\n\r\n    /**\r\n     * Converts the ByteBuffer's contents to a string.\r\n     * @param {string=} encoding Output encoding. Returns an informative string representation if omitted but also allows\r\n     *  direct conversion to \"utf8\", \"hex\", \"base64\" and \"binary\" encoding. \"debug\" returns a hex representation with\r\n     *  highlighted offsets.\r\n     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}\r\n     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}\r\n     * @returns {string} String representation\r\n     * @throws {Error} If `encoding` is invalid\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toString = function(encoding, begin, end) {\r\n        if (typeof encoding === 'undefined')\r\n            return \"ByteBufferAB(offset=\"+this.offset+\",markedOffset=\"+this.markedOffset+\",limit=\"+this.limit+\",capacity=\"+this.capacity()+\")\";\r\n        if (typeof encoding === 'number')\r\n            encoding = \"utf8\",\r\n            begin = encoding,\r\n            end = begin;\r\n        switch (encoding) {\r\n            case \"utf8\":\r\n                return this.toUTF8(begin, end);\r\n            case \"base64\":\r\n                return this.toBase64(begin, end);\r\n            case \"hex\":\r\n                return this.toHex(begin, end);\r\n            case \"binary\":\r\n                return this.toBinary(begin, end);\r\n            case \"debug\":\r\n                return this.toDebug();\r\n            case \"columns\":\r\n                return this.toColumns();\r\n            default:\r\n                throw Error(\"Unsupported encoding: \"+encoding);\r\n        }\r\n    };\r\n\r\n    // lxiv-embeddable\r\n\r\n    /**\r\n     * lxiv-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n     * Released under the Apache License, Version 2.0\r\n     * see: https://github.com/dcodeIO/lxiv for details\r\n     */\r\n    var lxiv = function() {\r\n        \"use strict\";\r\n\r\n        /**\r\n         * lxiv namespace.\r\n         * @type {!Object.<string,*>}\r\n         * @exports lxiv\r\n         */\r\n        var lxiv = {};\r\n\r\n        /**\r\n         * Character codes for output.\r\n         * @type {!Array.<number>}\r\n         * @inner\r\n         */\r\n        var aout = [\r\n            65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\r\n            81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102,\r\n            103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118,\r\n            119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47\r\n        ];\r\n\r\n        /**\r\n         * Character codes for input.\r\n         * @type {!Array.<number>}\r\n         * @inner\r\n         */\r\n        var ain = [];\r\n        for (var i=0, k=aout.length; i<k; ++i)\r\n            ain[aout[i]] = i;\r\n\r\n        /**\r\n         * Encodes bytes to base64 char codes.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if\r\n         *  there are no more bytes left.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each encoded char\r\n         *  code.\r\n         */\r\n        lxiv.encode = function(src, dst) {\r\n            var b, t;\r\n            while ((b = src()) !== null) {\r\n                dst(aout[(b>>2)&0x3f]);\r\n                t = (b&0x3)<<4;\r\n                if ((b = src()) !== null) {\r\n                    t |= (b>>4)&0xf;\r\n                    dst(aout[(t|((b>>4)&0xf))&0x3f]);\r\n                    t = (b&0xf)<<2;\r\n                    if ((b = src()) !== null)\r\n                        dst(aout[(t|((b>>6)&0x3))&0x3f]),\r\n                        dst(aout[b&0x3f]);\r\n                    else\r\n                        dst(aout[t&0x3f]),\r\n                        dst(61);\r\n                } else\r\n                    dst(aout[t&0x3f]),\r\n                    dst(61),\r\n                    dst(61);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Decodes base64 char codes to bytes.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n         * @throws {Error} If a character code is invalid\r\n         */\r\n        lxiv.decode = function(src, dst) {\r\n            var c, t1, t2;\r\n            function fail(c) {\r\n                throw Error(\"Illegal character code: \"+c);\r\n            }\r\n            while ((c = src()) !== null) {\r\n                t1 = ain[c];\r\n                if (typeof t1 === 'undefined') fail(c);\r\n                if ((c = src()) !== null) {\r\n                    t2 = ain[c];\r\n                    if (typeof t2 === 'undefined') fail(c);\r\n                    dst((t1<<2)>>>0|(t2&0x30)>>4);\r\n                    if ((c = src()) !== null) {\r\n                        t1 = ain[c];\r\n                        if (typeof t1 === 'undefined')\r\n                            if (c === 61) break; else fail(c);\r\n                        dst(((t2&0xf)<<4)>>>0|(t1&0x3c)>>2);\r\n                        if ((c = src()) !== null) {\r\n                            t2 = ain[c];\r\n                            if (typeof t2 === 'undefined')\r\n                                if (c === 61) break; else fail(c);\r\n                            dst(((t1&0x3)<<6)>>>0|t2);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Tests if a string is valid base64.\r\n         * @param {string} str String to test\r\n         * @returns {boolean} `true` if valid, otherwise `false`\r\n         */\r\n        lxiv.test = function(str) {\r\n            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);\r\n        };\r\n\r\n        return lxiv;\r\n    }();\r\n\r\n    // encodings/base64\r\n\r\n    /**\r\n     * Encodes this ByteBuffer's contents to a base64 encoded string.\r\n     * @param {number=} begin Offset to begin at, defaults to {@link ByteBuffer#offset}.\r\n     * @param {number=} end Offset to end at, defaults to {@link ByteBuffer#limit}.\r\n     * @returns {string} Base64 encoded string\r\n     * @throws {RangeError} If `begin` or `end` is out of bounds\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toBase64 = function(begin, end) {\r\n        if (typeof begin === 'undefined')\r\n            begin = this.offset;\r\n        if (typeof end === 'undefined')\r\n            end = this.limit;\r\n        begin = begin | 0; end = end | 0;\r\n        if (begin < 0 || end > this.capacity || begin > end)\r\n            throw RangeError(\"begin, end\");\r\n        var sd; lxiv.encode(function() {\r\n            return begin < end ? this.view[begin++] : null;\r\n        }.bind(this), sd = stringDestination());\r\n        return sd();\r\n    };\r\n\r\n    /**\r\n     * Decodes a base64 encoded string to a ByteBuffer.\r\n     * @param {string} str String to decode\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @returns {!ByteBuffer} ByteBuffer\r\n     * @expose\r\n     */\r\n    ByteBuffer.fromBase64 = function(str, littleEndian) {\r\n        if (typeof str !== 'string')\r\n            throw TypeError(\"str\");\r\n        var bb = new ByteBuffer(str.length/4*3, littleEndian),\r\n            i = 0;\r\n        lxiv.decode(stringSource(str), function(b) {\r\n            bb.view[i++] = b;\r\n        });\r\n        bb.limit = i;\r\n        return bb;\r\n    };\r\n\r\n    /**\r\n     * Encodes a binary string to base64 like `window.btoa` does.\r\n     * @param {string} str Binary string\r\n     * @returns {string} Base64 encoded string\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.btoa\r\n     * @expose\r\n     */\r\n    ByteBuffer.btoa = function(str) {\r\n        return ByteBuffer.fromBinary(str).toBase64();\r\n    };\r\n\r\n    /**\r\n     * Decodes a base64 encoded string to binary like `window.atob` does.\r\n     * @param {string} b64 Base64 encoded string\r\n     * @returns {string} Binary string\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/Window.atob\r\n     * @expose\r\n     */\r\n    ByteBuffer.atob = function(b64) {\r\n        return ByteBuffer.fromBase64(b64).toBinary();\r\n    };\r\n\r\n    // encodings/binary\r\n\r\n    /**\r\n     * Encodes this ByteBuffer to a binary encoded string, that is using only characters 0x00-0xFF as bytes.\r\n     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\r\n     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\r\n     * @returns {string} Binary encoded string\r\n     * @throws {RangeError} If `offset > limit`\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toBinary = function(begin, end) {\r\n        if (typeof begin === 'undefined')\r\n            begin = this.offset;\r\n        if (typeof end === 'undefined')\r\n            end = this.limit;\r\n        begin |= 0; end |= 0;\r\n        if (begin < 0 || end > this.capacity() || begin > end)\r\n            throw RangeError(\"begin, end\");\r\n        if (begin === end)\r\n            return \"\";\r\n        var chars = [],\r\n            parts = [];\r\n        while (begin < end) {\r\n            chars.push(this.view[begin++]);\r\n            if (chars.length >= 1024)\r\n                parts.push(String.fromCharCode.apply(String, chars)),\r\n                chars = [];\r\n        }\r\n        return parts.join('') + String.fromCharCode.apply(String, chars);\r\n    };\r\n\r\n    /**\r\n     * Decodes a binary encoded string, that is using only characters 0x00-0xFF as bytes, to a ByteBuffer.\r\n     * @param {string} str String to decode\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @returns {!ByteBuffer} ByteBuffer\r\n     * @expose\r\n     */\r\n    ByteBuffer.fromBinary = function(str, littleEndian) {\r\n        if (typeof str !== 'string')\r\n            throw TypeError(\"str\");\r\n        var i = 0,\r\n            k = str.length,\r\n            charCode,\r\n            bb = new ByteBuffer(k, littleEndian);\r\n        while (i<k) {\r\n            charCode = str.charCodeAt(i);\r\n            if (charCode > 0xff)\r\n                throw RangeError(\"illegal char code: \"+charCode);\r\n            bb.view[i++] = charCode;\r\n        }\r\n        bb.limit = k;\r\n        return bb;\r\n    };\r\n\r\n    // encodings/debug\r\n\r\n    /**\r\n     * Encodes this ByteBuffer to a hex encoded string with marked offsets. Offset symbols are:\r\n     * * `<` : offset,\r\n     * * `'` : markedOffset,\r\n     * * `>` : limit,\r\n     * * `|` : offset and limit,\r\n     * * `[` : offset and markedOffset,\r\n     * * `]` : markedOffset and limit,\r\n     * * `!` : offset, markedOffset and limit\r\n     * @param {boolean=} columns If `true` returns two columns hex + ascii, defaults to `false`\r\n     * @returns {string|!Array.<string>} Debug string or array of lines if `asArray = true`\r\n     * @expose\r\n     * @example `>00'01 02<03` contains four bytes with `limit=0, markedOffset=1, offset=3`\r\n     * @example `00[01 02 03>` contains four bytes with `offset=markedOffset=1, limit=4`\r\n     * @example `00|01 02 03` contains four bytes with `offset=limit=1, markedOffset=-1`\r\n     * @example `|` contains zero bytes with `offset=limit=0, markedOffset=-1`\r\n     */\r\n    ByteBufferPrototype.toDebug = function(columns) {\r\n        var i = -1,\r\n            k = this.buffer.byteLength,\r\n            b,\r\n            hex = \"\",\r\n            asc = \"\",\r\n            out = \"\";\r\n        while (i<k) {\r\n            if (i !== -1) {\r\n                b = this.view[i];\r\n                if (b < 0x10) hex += \"0\"+b.toString(16).toUpperCase();\r\n                else hex += b.toString(16).toUpperCase();\r\n                if (columns)\r\n                    asc += b > 32 && b < 127 ? String.fromCharCode(b) : '.';\r\n            }\r\n            ++i;\r\n            if (columns) {\r\n                if (i > 0 && i % 16 === 0 && i !== k) {\r\n                    while (hex.length < 3*16+3) hex += \" \";\r\n                    out += hex+asc+\"\\n\";\r\n                    hex = asc = \"\";\r\n                }\r\n            }\r\n            if (i === this.offset && i === this.limit)\r\n                hex += i === this.markedOffset ? \"!\" : \"|\";\r\n            else if (i === this.offset)\r\n                hex += i === this.markedOffset ? \"[\" : \"<\";\r\n            else if (i === this.limit)\r\n                hex += i === this.markedOffset ? \"]\" : \">\";\r\n            else\r\n                hex += i === this.markedOffset ? \"'\" : (columns || (i !== 0 && i !== k) ? \" \" : \"\");\r\n        }\r\n        if (columns && hex !== \" \") {\r\n            while (hex.length < 3*16+3)\r\n                hex += \" \";\r\n            out += hex + asc + \"\\n\";\r\n        }\r\n        return columns ? out : hex;\r\n    };\r\n\r\n    /**\r\n     * Decodes a hex encoded string with marked offsets to a ByteBuffer.\r\n     * @param {string} str Debug string to decode (not be generated with `columns = true`)\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @returns {!ByteBuffer} ByteBuffer\r\n     * @expose\r\n     * @see ByteBuffer#toDebug\r\n     */\r\n    ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {\r\n        var k = str.length,\r\n            bb = new ByteBuffer(((k+1)/3)|0, littleEndian, noAssert);\r\n        var i = 0, j = 0, ch, b,\r\n            rs = false, // Require symbol next\r\n            ho = false, hm = false, hl = false, // Already has offset (ho), markedOffset (hm), limit (hl)?\r\n            fail = false;\r\n        while (i<k) {\r\n            switch (ch = str.charAt(i++)) {\r\n                case '!':\r\n                    if (!noAssert) {\r\n                        if (ho || hm || hl) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        ho = hm = hl = true;\r\n                    }\r\n                    bb.offset = bb.markedOffset = bb.limit = j;\r\n                    rs = false;\r\n                    break;\r\n                case '|':\r\n                    if (!noAssert) {\r\n                        if (ho || hl) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        ho = hl = true;\r\n                    }\r\n                    bb.offset = bb.limit = j;\r\n                    rs = false;\r\n                    break;\r\n                case '[':\r\n                    if (!noAssert) {\r\n                        if (ho || hm) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        ho = hm = true;\r\n                    }\r\n                    bb.offset = bb.markedOffset = j;\r\n                    rs = false;\r\n                    break;\r\n                case '<':\r\n                    if (!noAssert) {\r\n                        if (ho) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        ho = true;\r\n                    }\r\n                    bb.offset = j;\r\n                    rs = false;\r\n                    break;\r\n                case ']':\r\n                    if (!noAssert) {\r\n                        if (hl || hm) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        hl = hm = true;\r\n                    }\r\n                    bb.limit = bb.markedOffset = j;\r\n                    rs = false;\r\n                    break;\r\n                case '>':\r\n                    if (!noAssert) {\r\n                        if (hl) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        hl = true;\r\n                    }\r\n                    bb.limit = j;\r\n                    rs = false;\r\n                    break;\r\n                case \"'\":\r\n                    if (!noAssert) {\r\n                        if (hm) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                        hm = true;\r\n                    }\r\n                    bb.markedOffset = j;\r\n                    rs = false;\r\n                    break;\r\n                case ' ':\r\n                    rs = false;\r\n                    break;\r\n                default:\r\n                    if (!noAssert) {\r\n                        if (rs) {\r\n                            fail = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    b = parseInt(ch+str.charAt(i++), 16);\r\n                    if (!noAssert) {\r\n                        if (isNaN(b) || b < 0 || b > 255)\r\n                            throw TypeError(\"Illegal str: Not a debug encoded string\");\r\n                    }\r\n                    bb.view[j++] = b;\r\n                    rs = true;\r\n            }\r\n            if (fail)\r\n                throw TypeError(\"Illegal str: Invalid symbol at \"+i);\r\n        }\r\n        if (!noAssert) {\r\n            if (!ho || !hl)\r\n                throw TypeError(\"Illegal str: Missing offset or limit\");\r\n            if (j<bb.buffer.byteLength)\r\n                throw TypeError(\"Illegal str: Not a debug encoded string (is it hex?) \"+j+\" < \"+k);\r\n        }\r\n        return bb;\r\n    };\r\n\r\n    // encodings/hex\r\n\r\n    /**\r\n     * Encodes this ByteBuffer's contents to a hex encoded string.\r\n     * @param {number=} begin Offset to begin at. Defaults to {@link ByteBuffer#offset}.\r\n     * @param {number=} end Offset to end at. Defaults to {@link ByteBuffer#limit}.\r\n     * @returns {string} Hex encoded string\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toHex = function(begin, end) {\r\n        begin = typeof begin === 'undefined' ? this.offset : begin;\r\n        end = typeof end === 'undefined' ? this.limit : end;\r\n        if (!this.noAssert) {\r\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        var out = new Array(end - begin),\r\n            b;\r\n        while (begin < end) {\r\n            b = this.view[begin++];\r\n            if (b < 0x10)\r\n                out.push(\"0\", b.toString(16));\r\n            else out.push(b.toString(16));\r\n        }\r\n        return out.join('');\r\n    };\r\n\r\n    /**\r\n     * Decodes a hex encoded string to a ByteBuffer.\r\n     * @param {string} str String to decode\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @returns {!ByteBuffer} ByteBuffer\r\n     * @expose\r\n     */\r\n    ByteBuffer.fromHex = function(str, littleEndian, noAssert) {\r\n        if (!noAssert) {\r\n            if (typeof str !== 'string')\r\n                throw TypeError(\"Illegal str: Not a string\");\r\n            if (str.length % 2 !== 0)\r\n                throw TypeError(\"Illegal str: Length not a multiple of 2\");\r\n        }\r\n        var k = str.length,\r\n            bb = new ByteBuffer((k / 2) | 0, littleEndian),\r\n            b;\r\n        for (var i=0, j=0; i<k; i+=2) {\r\n            b = parseInt(str.substring(i, i+2), 16);\r\n            if (!noAssert)\r\n                if (!isFinite(b) || b < 0 || b > 255)\r\n                    throw TypeError(\"Illegal str: Contains non-hex characters\");\r\n            bb.view[j++] = b;\r\n        }\r\n        bb.limit = j;\r\n        return bb;\r\n    };\r\n\r\n    // utfx-embeddable\r\n\r\n    /**\r\n     * utfx-embeddable (c) 2014 Daniel Wirtz <dcode@dcode.io>\r\n     * Released under the Apache License, Version 2.0\r\n     * see: https://github.com/dcodeIO/utfx for details\r\n     */\r\n    var utfx = function() {\r\n        \"use strict\";\r\n\r\n        /**\r\n         * utfx namespace.\r\n         * @inner\r\n         * @type {!Object.<string,*>}\r\n         */\r\n        var utfx = {};\r\n\r\n        /**\r\n         * Maximum valid code point.\r\n         * @type {number}\r\n         * @const\r\n         */\r\n        utfx.MAX_CODEPOINT = 0x10FFFF;\r\n\r\n        /**\r\n         * Encodes UTF8 code points to UTF8 bytes.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte\r\n         */\r\n        utfx.encodeUTF8 = function(src, dst) {\r\n            var cp = null;\r\n            if (typeof src === 'number')\r\n                cp = src,\r\n                src = function() { return null; };\r\n            while (cp !== null || (cp = src()) !== null) {\r\n                if (cp < 0x80)\r\n                    dst(cp&0x7F);\r\n                else if (cp < 0x800)\r\n                    dst(((cp>>6)&0x1F)|0xC0),\r\n                    dst((cp&0x3F)|0x80);\r\n                else if (cp < 0x10000)\r\n                    dst(((cp>>12)&0x0F)|0xE0),\r\n                    dst(((cp>>6)&0x3F)|0x80),\r\n                    dst((cp&0x3F)|0x80);\r\n                else\r\n                    dst(((cp>>18)&0x07)|0xF0),\r\n                    dst(((cp>>12)&0x3F)|0x80),\r\n                    dst(((cp>>6)&0x3F)|0x80),\r\n                    dst((cp&0x3F)|0x80);\r\n                cp = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Decodes UTF8 bytes to UTF8 code points.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each decoded code point.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the\r\n         *  remaining bytes.\r\n         */\r\n        utfx.decodeUTF8 = function(src, dst) {\r\n            var a, b, c, d, fail = function(b) {\r\n                b = b.slice(0, b.indexOf(null));\r\n                var err = Error(b.toString());\r\n                err.name = \"TruncatedError\";\r\n                err['bytes'] = b;\r\n                throw err;\r\n            };\r\n            while ((a = src()) !== null) {\r\n                if ((a&0x80) === 0)\r\n                    dst(a);\r\n                else if ((a&0xE0) === 0xC0)\r\n                    ((b = src()) === null) && fail([a, b]),\r\n                    dst(((a&0x1F)<<6) | (b&0x3F));\r\n                else if ((a&0xF0) === 0xE0)\r\n                    ((b=src()) === null || (c=src()) === null) && fail([a, b, c]),\r\n                    dst(((a&0x0F)<<12) | ((b&0x3F)<<6) | (c&0x3F));\r\n                else if ((a&0xF8) === 0xF0)\r\n                    ((b=src()) === null || (c=src()) === null || (d=src()) === null) && fail([a, b, c ,d]),\r\n                    dst(((a&0x07)<<18) | ((b&0x3F)<<12) | ((c&0x3F)<<6) | (d&0x3F));\r\n                else throw RangeError(\"Illegal starting byte: \"+a);\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Converts UTF16 characters to UTF8 code points.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @param {!function(number)} dst Code points destination as a function successively called with each converted code\r\n         *  point.\r\n         */\r\n        utfx.UTF16toUTF8 = function(src, dst) {\r\n            var c1, c2 = null;\r\n            while (true) {\r\n                if ((c1 = c2 !== null ? c2 : src()) === null)\r\n                    break;\r\n                if (c1 >= 0xD800 && c1 <= 0xDFFF) {\r\n                    if ((c2 = src()) !== null) {\r\n                        if (c2 >= 0xDC00 && c2 <= 0xDFFF) {\r\n                            dst((c1-0xD800)*0x400+c2-0xDC00+0x10000);\r\n                            c2 = null; continue;\r\n                        }\r\n                    }\r\n                }\r\n                dst(c1);\r\n            }\r\n            if (c2 !== null) dst(c2);\r\n        };\r\n\r\n        /**\r\n         * Converts UTF8 code points to UTF16 characters.\r\n         * @param {(!function():number|null) | number} src Code points source, either as a function returning the next code point\r\n         *  respectively `null` if there are no more code points left or a single numeric code point.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a code point is out of range\r\n         */\r\n        utfx.UTF8toUTF16 = function(src, dst) {\r\n            var cp = null;\r\n            if (typeof src === 'number')\r\n                cp = src, src = function() { return null; };\r\n            while (cp !== null || (cp = src()) !== null) {\r\n                if (cp <= 0xFFFF)\r\n                    dst(cp);\r\n                else\r\n                    cp -= 0x10000,\r\n                    dst((cp>>10)+0xD800),\r\n                    dst((cp%0x400)+0xDC00);\r\n                cp = null;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Converts and encodes UTF16 characters to UTF8 bytes.\r\n         * @param {!function():number|null} src Characters source as a function returning the next char code respectively `null`\r\n         *  if there are no more characters left.\r\n         * @param {!function(number)} dst Bytes destination as a function successively called with the next byte.\r\n         */\r\n        utfx.encodeUTF16toUTF8 = function(src, dst) {\r\n            utfx.UTF16toUTF8(src, function(cp) {\r\n                utfx.encodeUTF8(cp, dst);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Decodes and converts UTF8 bytes to UTF16 characters.\r\n         * @param {!function():number|null} src Bytes source as a function returning the next byte respectively `null` if there\r\n         *  are no more bytes left.\r\n         * @param {!function(number)} dst Characters destination as a function successively called with each converted char code.\r\n         * @throws {RangeError} If a starting byte is invalid in UTF8\r\n         * @throws {Error} If the last sequence is truncated. Has an array property `bytes` holding the remaining bytes.\r\n         */\r\n        utfx.decodeUTF8toUTF16 = function(src, dst) {\r\n            utfx.decodeUTF8(src, function(cp) {\r\n                utfx.UTF8toUTF16(cp, dst);\r\n            });\r\n        };\r\n\r\n        /**\r\n         * Calculates the byte length of an UTF8 code point.\r\n         * @param {number} cp UTF8 code point\r\n         * @returns {number} Byte length\r\n         */\r\n        utfx.calculateCodePoint = function(cp) {\r\n            return (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n        };\r\n\r\n        /**\r\n         * Calculates the number of UTF8 bytes required to store UTF8 code points.\r\n         * @param {(!function():number|null)} src Code points source as a function returning the next code point respectively\r\n         *  `null` if there are no more code points left.\r\n         * @returns {number} The number of UTF8 bytes required\r\n         */\r\n        utfx.calculateUTF8 = function(src) {\r\n            var cp, l=0;\r\n            while ((cp = src()) !== null)\r\n                l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n            return l;\r\n        };\r\n\r\n        /**\r\n         * Calculates the number of UTF8 code points respectively UTF8 bytes required to store UTF16 char codes.\r\n         * @param {(!function():number|null)} src Characters source as a function returning the next char code respectively\r\n         *  `null` if there are no more characters left.\r\n         * @returns {!Array.<number>} The number of UTF8 code points at index 0 and the number of UTF8 bytes required at index 1.\r\n         */\r\n        utfx.calculateUTF16asUTF8 = function(src) {\r\n            var n=0, l=0;\r\n            utfx.UTF16toUTF8(src, function(cp) {\r\n                ++n; l += (cp < 0x80) ? 1 : (cp < 0x800) ? 2 : (cp < 0x10000) ? 3 : 4;\r\n            });\r\n            return [n,l];\r\n        };\r\n\r\n        return utfx;\r\n    }();\r\n\r\n    // encodings/utf8\r\n\r\n    /**\r\n     * Encodes this ByteBuffer's contents between {@link ByteBuffer#offset} and {@link ByteBuffer#limit} to an UTF8 encoded\r\n     *  string.\r\n     * @returns {string} Hex encoded string\r\n     * @throws {RangeError} If `offset > limit`\r\n     * @expose\r\n     */\r\n    ByteBufferPrototype.toUTF8 = function(begin, end) {\r\n        if (typeof begin === 'undefined') begin = this.offset;\r\n        if (typeof end === 'undefined') end = this.limit;\r\n        if (!this.noAssert) {\r\n            if (typeof begin !== 'number' || begin % 1 !== 0)\n                throw TypeError(\"Illegal begin: Not an integer\");\n            begin >>>= 0;\n            if (typeof end !== 'number' || end % 1 !== 0)\n                throw TypeError(\"Illegal end: Not an integer\");\n            end >>>= 0;\n            if (begin < 0 || begin > end || end > this.buffer.byteLength)\n                throw RangeError(\"Illegal range: 0 <= \"+begin+\" <= \"+end+\" <= \"+this.buffer.byteLength);\n        }\r\n        var sd; try {\r\n            utfx.decodeUTF8toUTF16(function() {\r\n                return begin < end ? this.view[begin++] : null;\r\n            }.bind(this), sd = stringDestination());\r\n        } catch (e) {\r\n            if (begin !== end)\r\n                throw RangeError(\"Illegal range: Truncated data, \"+begin+\" != \"+end);\r\n        }\r\n        return sd();\r\n    };\r\n\r\n    /**\r\n     * Decodes an UTF8 encoded string to a ByteBuffer.\r\n     * @param {string} str String to decode\r\n     * @param {boolean=} littleEndian Whether to use little or big endian byte order. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_ENDIAN}.\r\n     * @param {boolean=} noAssert Whether to skip assertions of offsets and values. Defaults to\r\n     *  {@link ByteBuffer.DEFAULT_NOASSERT}.\r\n     * @returns {!ByteBuffer} ByteBuffer\r\n     * @expose\r\n     */\r\n    ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {\r\n        if (!noAssert)\r\n            if (typeof str !== 'string')\r\n                throw TypeError(\"Illegal str: Not a string\");\r\n        var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert),\r\n            i = 0;\r\n        utfx.encodeUTF16toUTF8(stringSource(str), function(b) {\r\n            bb.view[i++] = b;\r\n        });\r\n        bb.limit = i;\r\n        return bb;\r\n    };\r\n\r\n    return ByteBuffer;\r\n});\r\n","'use strict';\n\nvar utils = require('./utils');\nvar normalizeHeaderName = require('./helpers/normalizeHeaderName');\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = require('./adapters/xhr');\n  } else if (typeof process !== 'undefined') {\n    // For node use HTTP adapter\n    adapter = require('./adapters/http');\n  }\n  return adapter;\n}\n\nvar defaults = {\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Content-Type');\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data)) {\n      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');\n      return JSON.stringify(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    /*eslint no-param-reassign:0*/\n    if (typeof data === 'string') {\n      try {\n        data = JSON.parse(data);\n      } catch (e) { /* Ignore */ }\n    }\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n};\n\ndefaults.headers = {\n  common: {\n    'Accept': 'application/json, text/plain, */*'\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n","'use strict';\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n","'use strict';\n\nvar utils = require('./../utils');\nvar settle = require('./../core/settle');\nvar buildURL = require('./../helpers/buildURL');\nvar parseHeaders = require('./../helpers/parseHeaders');\nvar isURLSameOrigin = require('./../helpers/isURLSameOrigin');\nvar createError = require('../core/createError');\nvar btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || require('./../helpers/btoa');\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n    var loadEvent = 'onreadystatechange';\n    var xDomain = false;\n\n    // For IE 8/9 CORS support\n    // Only supports POST and GET calls and doesn't returns the response headers.\n    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.\n    if (process.env.NODE_ENV !== 'test' &&\n        typeof window !== 'undefined' &&\n        window.XDomainRequest && !('withCredentials' in request) &&\n        !isURLSameOrigin(config.url)) {\n      request = new window.XDomainRequest();\n      loadEvent = 'onload';\n      xDomain = true;\n      request.onprogress = function handleProgress() {};\n      request.ontimeout = function handleTimeout() {};\n    }\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password || '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    // Listen for ready state\n    request[loadEvent] = function handleLoad() {\n      if (!request || (request.readyState !== 4 && !xDomain)) {\n        return;\n      }\n\n      // The request errored out and we didn't get a response, this will be\n      // handled by onerror instead\n      // With one exception: request that using file: protocol, most browsers\n      // will return status as 0 even though it's a successful request\n      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n        return;\n      }\n\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;\n      var response = {\n        data: responseData,\n        // IE sends 1223 instead of 204 (https://github.com/axios/axios/issues/201)\n        status: request.status === 1223 ? 204 : request.status,\n        statusText: request.status === 1223 ? 'No Content' : request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(resolve, reject, response);\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      var cookies = require('./../helpers/cookies');\n\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?\n          cookies.read(config.xsrfCookieName) :\n          undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (config.withCredentials) {\n      request.withCredentials = true;\n    }\n\n    // Add responseType to request if needed\n    if (config.responseType) {\n      try {\n        request.responseType = config.responseType;\n      } catch (e) {\n        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.\n        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.\n        if (config.responseType !== 'json') {\n          throw e;\n        }\n      }\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken) {\n      // Handle cancellation\n      config.cancelToken.promise.then(function onCanceled(cancel) {\n        if (!request) {\n          return;\n        }\n\n        request.abort();\n        reject(cancel);\n        // Clean up request\n        request = null;\n      });\n    }\n\n    if (requestData === undefined) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n","'use strict';\n\nvar enhanceError = require('./enhanceError');\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n","'use strict';\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n","'use strict';\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n","import axios, { AxiosInstance, AxiosRequestConfig } from 'axios'\r\nimport * as ByteBuffer from 'bytebuffer'\r\nimport { AbiProvider, AuthorityProvider, AuthorityProviderArgs, BinaryAbi } from 'eosjs/dist/eosjs-api-interfaces'\r\nimport { base64ToBinary, convertLegacyPublicKeys } from 'eosjs/dist/eosjs-numeric'\r\nimport {\r\n    Abi,\r\n    GetAbiResult,\r\n    GetBlockResult,\r\n    GetCodeResult,\r\n    GetInfoResult,\r\n    GetRawCodeAndAbiResult,\r\n    PushTransactionArgs\r\n} from 'eosjs/dist/eosjs-rpc-interfaces'\r\nimport { RpcError } from 'eosjs/dist/eosjs-rpcerror'\r\n\r\nfunction arrayToHex (data: Uint8Array) {\r\n    let result = ''\r\n    for (const x of data) {\r\n        result += ('00' + x.toString(16)).slice(-2)\r\n    }\r\n    return result\r\n}\r\n\r\nexport default class JsonRpc implements AuthorityProvider, AbiProvider {\r\n    public api: AxiosInstance\r\n    public coin: string\r\n\r\n    constructor (endpoint: string, args: any = { coin: 'eos', timeout: 10000 }) {\r\n        const config = {\r\n            baseURL: endpoint,\r\n            timeout: args.timeout\r\n        }\r\n        this.api = axios.create(config as AxiosRequestConfig)\r\n        this.coin = args.coin\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_abi (account_name: string): Promise<GetAbiResult> {\r\n        return this.api.get(`/v1/eos/${this.coin}/contracts/` + account_name).then(r => {\r\n            const abiStr = r.data.abi\r\n            const abi = JSON.parse(abiStr)\r\n            return {\r\n                account_name,\r\n                abi: abi as Abi\r\n            } as GetAbiResult\r\n        })\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_account (account_name: string): Promise<any> {\r\n        return this.api.get(`/v1/eos/${this.coin}/accounts/` + account_name).then(r => {\r\n            return r.data\r\n        })\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_block_header_state (block_num_or_id: number | string): Promise<any> {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_block (block_num_or_id: number | string): Promise<GetBlockResult> {\r\n        let req: any = {}\r\n        if (typeof block_num_or_id === 'number') {\r\n            req = {\r\n                num_start: block_num_or_id,\r\n                num_end: block_num_or_id + 1,\r\n                num_asc: true,\r\n                include_transactions: true\r\n            }\r\n        } else {\r\n            req.id = block_num_or_id\r\n        }\r\n        return this.api.post(`/v1/eos/${this.coin}/blocks`, req).then(r => {\r\n            const block = r.data.blocks[0] // TODO: satisfy GetBlockResult?\r\n            if (block.id) {\r\n                block.ref_block_prefix = ByteBuffer.fromHex(block.id.slice(16, 32),\r\n                                                            ByteBuffer.LITTLE_ENDIAN).readUint32()\r\n            }\r\n            if (block.timestamp && block.timestamp.endsWith('Z')) {\r\n                block.timestamp = block.timestamp.substr(0, block.timestamp.length - 1)\r\n            }\r\n            if (block.num) {\r\n                block.block_num = block.num\r\n            }\r\n            return block\r\n        })\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_code (account_name: string, code_as_wasm: boolean = false): Promise<GetCodeResult> {\r\n        return this.api.get(`/v1/eos/${this.coin}/contracts/` + account_name, {\r\n            params: { include_code: true, raw: true, wast: !code_as_wasm }\r\n        }).then(r => {\r\n            const abiStr = r.data.abi\r\n            const abi = JSON.parse(abiStr)\r\n            return {\r\n                account_name,\r\n                abi: abi as Abi,\r\n                wasm: r.data.wasm,\r\n                wast: r.data.wast,\r\n                code_hash: r.data.code_hash\r\n            } as GetCodeResult\r\n        })\r\n    }\r\n\r\n    public async get_currency_balance (code: string, account: string, symbol: string = null): Promise<any> {\r\n        return this.api.get(`/v1/eos/${this.coin}/accounts/${account}/balance?contract=${code}&symbol=${symbol}`).then(r => {\r\n            return r.data.balances.map((b: any) => {\r\n                return `${b.balance.toFixed(4)} ${b.symbol}` // TODO: precision may be not 4\r\n            })\r\n        })\r\n    }\r\n\r\n    public async get_currency_stats (code: string, symbol: string): Promise<any> {\r\n        return this.api.post(`/v1/eos/${this.coin}/currency/stats`, {\r\n            currencies: [ { contract: code, symbol } ]\r\n        }).then(r => {\r\n            const stats = r.data.stats[0]\r\n            return {\r\n                [symbol]: {\r\n                    supply: `${stats.supply.toFixed(4)} ${symbol}`,\r\n                    max_supply: `${stats.max_supply.toFixed(4)} ${symbol}`,\r\n                    issuer: stats.issuer\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    public async get_info (): Promise<GetInfoResult> { // TODO: `get_info` returns block which `get_block` can not find\r\n        return this.api.get(`/v1/eos/${this.coin}/info`).then(r => {\r\n            return r.data\r\n        })\r\n    }\r\n\r\n    public async get_producer_schedule (): Promise<any> {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_producers (json = true, lower_bound = '', limit = 50): Promise<any> {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async get_raw_code_and_abi (account_name: string): Promise<GetRawCodeAndAbiResult> {\r\n        return this.api.get(`/v1/eos/${this.coin}/contracts/${account_name}?include_code=true&raw=true`).then(r => {\r\n            return {\r\n                account_name,\r\n                wasm: r.data.wasm,\r\n                abi: r.data.abi\r\n            }\r\n        })\r\n    }\r\n\r\n    public async getRawAbi (accountName: string): Promise<BinaryAbi> {\r\n        const rawCodeAndAbi = await this.get_raw_code_and_abi(accountName)\r\n        const abi = base64ToBinary(rawCodeAndAbi.abi)\r\n        return {\r\n            accountName: rawCodeAndAbi.account_name,\r\n            abi\r\n        }\r\n    }\r\n\r\n    public async get_table_rows ({\r\n        json = true,\r\n        code,\r\n        scope,\r\n        table,\r\n        table_key = '', // TODO: useless?\r\n        lower_bound = '',\r\n        upper_bound = '',\r\n        limit = 10 }: any): Promise<any> {\r\n        return this.api.post(`/v1/eos/${this.coin}/table`, {\r\n            code, scope, table, lower_bound, upper_bound, limit,\r\n            binary: !json\r\n        }).then(r => {\r\n            return r.data\r\n        })\r\n    }\r\n\r\n    /** Get subset of `availableKeys` needed to meet authorities in `transaction`. Implements `AuthorityProvider` */\r\n    public async getRequiredKeys (args: AuthorityProviderArgs): Promise<string[]> {\r\n        const transaction = JSON.stringify(args.transaction)\r\n        return this.api.post(`/v1/eos/${this.coin}/required-keys`, {\r\n            transaction,\r\n            available_keys: args.availableKeys,\r\n        }).then(r => {\r\n            return convertLegacyPublicKeys(r.data.required_keys)\r\n        })\r\n    }\r\n\r\n    /** Push a serialized transaction */\r\n    public async push_transaction ({ signatures, serializedTransaction }: PushTransactionArgs): Promise<any> {\r\n        let r\r\n        try {\r\n            r = await this.api.post(`/v1/eos/${this.coin}/txs`, {\r\n                tx: JSON.stringify({\r\n                    signatures,\r\n                    packed_trx: arrayToHex(serializedTransaction)\r\n                })\r\n            })\r\n        } catch (e) {\r\n            // TODO: 10027 corresponds CodeSendTransactionError\r\n            if (e && e.response && e.response.data && e.response.data.code === 10027) {\r\n                const msg = JSON.parse(e.response.data.message)\r\n                throw new RpcError(msg)\r\n            } else {\r\n                throw e\r\n            }\r\n        }\r\n\r\n        let processed\r\n        if (r.data && r.data.processed) {\r\n            processed = JSON.parse(r.data.processed)\r\n            if (processed && processed.except) {\r\n                throw new RpcError({\r\n                    transaction_id: r.data.tx_id,\r\n                    processed\r\n                })\r\n            }\r\n        }\r\n        return {\r\n            transaction_id: r.data.tx_id,\r\n            processed\r\n        }\r\n    }\r\n\r\n    public async db_size_get () {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async history_get_actions (account_name: string, pos: number = null, offset: number = null) {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async history_get_transaction (id: string, block_num_hint: number = null) {\r\n        throw new Error('not implemented')\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async history_get_key_accounts (public_key: string) {\r\n        return this.api.get(`/v1/eos/${this.coin}/accounts-for-key?public_key=${public_key}`).then(r => {\r\n            return {\r\n                account_names: r.data.accounts\r\n            }\r\n        })\r\n    }\r\n\r\n    // tslint:disable-next-line:variable-name\r\n    public async history_get_controlled_accounts (controlling_account: string) {\r\n        throw new Error('not implemented') // TODO\r\n    }\r\n}\r\n","module.exports = require('./lib/axios');","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(utils.merge(defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","'use strict';\n\nvar defaults = require('./../defaults');\nvar utils = require('./../utils');\nvar InterceptorManager = require('./InterceptorManager');\nvar dispatchRequest = require('./dispatchRequest');\n\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = utils.merge({\n      url: arguments[0]\n    }, arguments[1]);\n  }\n\n  config = utils.merge(defaults, {method: 'get'}, this.defaults, config);\n  config.method = config.method.toLowerCase();\n\n  // Hook up interceptors middleware\n  var chain = [dispatchRequest, undefined];\n  var promise = Promise.resolve(config);\n\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    chain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    chain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  while (chain.length) {\n    promise = promise.then(chain.shift(), chain.shift());\n  }\n\n  return promise;\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(utils.merge(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n","'use strict';\n\nvar createError = require('./createError');\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n","'use strict';\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n  error.request = request;\n  error.response = response;\n  return error;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%40/gi, '@').\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n  (function standardBrowserEnv() {\n    var msie = /(msie|trident)/i.test(navigator.userAgent);\n    var urlParsingNode = document.createElement('a');\n    var originURL;\n\n    /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n    function resolveURL(url) {\n      var href = url;\n\n      if (msie) {\n        // IE needs attribute set twice to normalize properties\n        urlParsingNode.setAttribute('href', href);\n        href = urlParsingNode.href;\n      }\n\n      urlParsingNode.setAttribute('href', href);\n\n      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n      return {\n        href: urlParsingNode.href,\n        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n        host: urlParsingNode.host,\n        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n        hostname: urlParsingNode.hostname,\n        port: urlParsingNode.port,\n        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n                  urlParsingNode.pathname :\n                  '/' + urlParsingNode.pathname\n      };\n    }\n\n    originURL = resolveURL(window.location.href);\n\n    /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n    return function isURLSameOrigin(requestURL) {\n      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n      return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n    };\n  })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return function isURLSameOrigin() {\n      return true;\n    };\n  })()\n);\n","'use strict';\n\n// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction E() {\n  this.message = 'String contains an invalid character';\n}\nE.prototype = new Error;\nE.prototype.code = 5;\nE.prototype.name = 'InvalidCharacterError';\n\nfunction btoa(input) {\n  var str = String(input);\n  var output = '';\n  for (\n    // initialize result and counter\n    var block, charCode, idx = 0, map = chars;\n    // if the next str index does not exist:\n    //   change the mapping table to \"=\"\n    //   check if d has no fractional digits\n    str.charAt(idx | 0) || (map = '=', idx % 1);\n    // \"8 - idx % 1 * 8\" generates the sequence 2, 4, 6, 8\n    output += map.charAt(63 & block >> 8 - idx % 1 * 8)\n  ) {\n    charCode = str.charCodeAt(idx += 3 / 4);\n    if (charCode > 0xFF) {\n      throw new E();\n    }\n    block = block << 8 | charCode;\n  }\n  return output;\n}\n\nmodule.exports = btoa;\n","'use strict';\n\nvar utils = require('./../utils');\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n  (function standardBrowserEnv() {\n    return {\n      write: function write(name, value, expires, path, domain, secure) {\n        var cookie = [];\n        cookie.push(name + '=' + encodeURIComponent(value));\n\n        if (utils.isNumber(expires)) {\n          cookie.push('expires=' + new Date(expires).toGMTString());\n        }\n\n        if (utils.isString(path)) {\n          cookie.push('path=' + path);\n        }\n\n        if (utils.isString(domain)) {\n          cookie.push('domain=' + domain);\n        }\n\n        if (secure === true) {\n          cookie.push('secure');\n        }\n\n        document.cookie = cookie.join('; ');\n      },\n\n      read: function read(name) {\n        var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n        return (match ? decodeURIComponent(match[3]) : null);\n      },\n\n      remove: function remove(name) {\n        this.write(name, '', Date.now() - 86400000);\n      }\n    };\n  })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n  (function nonStandardBrowserEnv() {\n    return {\n      write: function write() {},\n      read: function read() { return null; },\n      remove: function remove() {}\n    };\n  })()\n);\n","'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n","'use strict';\n\nvar utils = require('./../utils');\nvar transformData = require('./transformData');\nvar isCancel = require('../cancel/isCancel');\nvar defaults = require('../defaults');\nvar isAbsoluteURL = require('./../helpers/isAbsoluteURL');\nvar combineURLs = require('./../helpers/combineURLs');\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Support baseURL config\n  if (config.baseURL && !isAbsoluteURL(config.url)) {\n    config.url = combineURLs(config.baseURL, config.url);\n  }\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData(\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers || {}\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData(\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData(\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n","'use strict';\n\nvar utils = require('./../utils');\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn(data, headers);\n  });\n\n  return data;\n};\n","'use strict';\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with \"<scheme>://\" or \"//\" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n","'use strict';\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n","'use strict';\n\nvar Cancel = require('./Cancel');\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n","'use strict';\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n","/*\r\n Copyright 2013 Daniel Wirtz <dcode@dcode.io>\r\n Copyright 2009 The Closure Library Authors. All Rights Reserved.\r\n\r\n Licensed under the Apache License, Version 2.0 (the \"License\");\r\n you may not use this file except in compliance with the License.\r\n You may obtain a copy of the License at\r\n\r\n http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n Unless required by applicable law or agreed to in writing, software\r\n distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n See the License for the specific language governing permissions and\r\n limitations under the License.\r\n */\r\n\r\n/**\r\n * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>\r\n * Released under the Apache License, Version 2.0\r\n * see: https://github.com/dcodeIO/long.js for details\r\n */\r\n(function(global, factory) {\r\n\r\n    /* AMD */ if (typeof define === 'function' && define[\"amd\"])\r\n        define([], factory);\r\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === \"object\" && module && module[\"exports\"])\r\n        module[\"exports\"] = factory();\r\n    /* Global */ else\r\n        (global[\"dcodeIO\"] = global[\"dcodeIO\"] || {})[\"Long\"] = factory();\r\n\r\n})(this, function() {\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n     *  See the from* functions below for more convenient ways of constructing Longs.\r\n     * @exports Long\r\n     * @class A Long class for representing a 64 bit two's-complement integer value.\r\n     * @param {number} low The low (signed) 32 bits of the long\r\n     * @param {number} high The high (signed) 32 bits of the long\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @constructor\r\n     */\r\n    function Long(low, high, unsigned) {\r\n\r\n        /**\r\n         * The low 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.low = low | 0;\r\n\r\n        /**\r\n         * The high 32 bits as a signed value.\r\n         * @type {number}\r\n         */\r\n        this.high = high | 0;\r\n\r\n        /**\r\n         * Whether unsigned or not.\r\n         * @type {boolean}\r\n         */\r\n        this.unsigned = !!unsigned;\r\n    }\r\n\r\n    // The internal representation of a long is the two given signed, 32-bit values.\r\n    // We use 32-bit pieces because these are the size of integers on which\r\n    // Javascript performs bit-operations.  For operations like addition and\r\n    // multiplication, we split each number into 16 bit pieces, which can easily be\r\n    // multiplied within Javascript's floating-point representation without overflow\r\n    // or change in sign.\r\n    //\r\n    // In the algorithms below, we frequently reduce the negative case to the\r\n    // positive case by negating the input(s) and then post-processing the result.\r\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n    // a positive number, it overflows back into a negative).  Not handling this\r\n    // case would often result in infinite recursion.\r\n    //\r\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n    // methods on which they depend.\r\n\r\n    /**\r\n     * An indicator used to reliably determine if an object is a Long or not.\r\n     * @type {boolean}\r\n     * @const\r\n     * @private\r\n     */\r\n    Long.prototype.__isLong__;\r\n\r\n    Object.defineProperty(Long.prototype, \"__isLong__\", {\r\n        value: true,\r\n        enumerable: false,\r\n        configurable: false\r\n    });\r\n\r\n    /**\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     * @inner\r\n     */\r\n    function isLong(obj) {\r\n        return (obj && obj[\"__isLong__\"]) === true;\r\n    }\r\n\r\n    /**\r\n     * Tests if the specified object is a Long.\r\n     * @function\r\n     * @param {*} obj Object\r\n     * @returns {boolean}\r\n     */\r\n    Long.isLong = isLong;\r\n\r\n    /**\r\n     * A cache of the Long representations of small integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var INT_CACHE = {};\r\n\r\n    /**\r\n     * A cache of the Long representations of small unsigned integer values.\r\n     * @type {!Object}\r\n     * @inner\r\n     */\r\n    var UINT_CACHE = {};\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromInt(value, unsigned) {\r\n        var obj, cachedObj, cache;\r\n        if (unsigned) {\r\n            value >>>= 0;\r\n            if (cache = (0 <= value && value < 256)) {\r\n                cachedObj = UINT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n            if (cache)\r\n                UINT_CACHE[value] = obj;\r\n            return obj;\r\n        } else {\r\n            value |= 0;\r\n            if (cache = (-128 <= value && value < 128)) {\r\n                cachedObj = INT_CACHE[value];\r\n                if (cachedObj)\r\n                    return cachedObj;\r\n            }\r\n            obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n            if (cache)\r\n                INT_CACHE[value] = obj;\r\n            return obj;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given 32 bit integer value.\r\n     * @function\r\n     * @param {number} value The 32 bit integer in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromInt = fromInt;\r\n\r\n    /**\r\n     * @param {number} value\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromNumber(value, unsigned) {\r\n        if (isNaN(value) || !isFinite(value))\r\n            return unsigned ? UZERO : ZERO;\r\n        if (unsigned) {\r\n            if (value < 0)\r\n                return UZERO;\r\n            if (value >= TWO_PWR_64_DBL)\r\n                return MAX_UNSIGNED_VALUE;\r\n        } else {\r\n            if (value <= -TWO_PWR_63_DBL)\r\n                return MIN_VALUE;\r\n            if (value + 1 >= TWO_PWR_63_DBL)\r\n                return MAX_VALUE;\r\n        }\r\n        if (value < 0)\r\n            return fromNumber(-value, unsigned).neg();\r\n        return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n     * @function\r\n     * @param {number} value The number in question\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromNumber = fromNumber;\r\n\r\n    /**\r\n     * @param {number} lowBits\r\n     * @param {number} highBits\r\n     * @param {boolean=} unsigned\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromBits(lowBits, highBits, unsigned) {\r\n        return new Long(lowBits, highBits, unsigned);\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n     *  assumed to use 32 bits.\r\n     * @function\r\n     * @param {number} lowBits The low 32 bits\r\n     * @param {number} highBits The high 32 bits\r\n     * @param {boolean=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromBits = fromBits;\r\n\r\n    /**\r\n     * @function\r\n     * @param {number} base\r\n     * @param {number} exponent\r\n     * @returns {number}\r\n     * @inner\r\n     */\r\n    var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n    /**\r\n     * @param {string} str\r\n     * @param {(boolean|number)=} unsigned\r\n     * @param {number=} radix\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromString(str, unsigned, radix) {\r\n        if (str.length === 0)\r\n            throw Error('empty string');\r\n        if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n            return ZERO;\r\n        if (typeof unsigned === 'number') {\r\n            // For goog.math.long compatibility\r\n            radix = unsigned,\r\n            unsigned = false;\r\n        } else {\r\n            unsigned = !! unsigned;\r\n        }\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n\r\n        var p;\r\n        if ((p = str.indexOf('-')) > 0)\r\n            throw Error('interior hyphen');\r\n        else if (p === 0) {\r\n            return fromString(str.substring(1), unsigned, radix).neg();\r\n        }\r\n\r\n        // Do several (8) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n        var result = ZERO;\r\n        for (var i = 0; i < str.length; i += 8) {\r\n            var size = Math.min(8, str.length - i),\r\n                value = parseInt(str.substring(i, i + size), radix);\r\n            if (size < 8) {\r\n                var power = fromNumber(pow_dbl(radix, size));\r\n                result = result.mul(power).add(fromNumber(value));\r\n            } else {\r\n                result = result.mul(radixToPower);\r\n                result = result.add(fromNumber(value));\r\n            }\r\n        }\r\n        result.unsigned = unsigned;\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns a Long representation of the given string, written using the specified radix.\r\n     * @function\r\n     * @param {string} str The textual representation of the Long\r\n     * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to `false` for signed\r\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n     * @returns {!Long} The corresponding Long value\r\n     */\r\n    Long.fromString = fromString;\r\n\r\n    /**\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n     * @returns {!Long}\r\n     * @inner\r\n     */\r\n    function fromValue(val) {\r\n        if (val /* is compatible */ instanceof Long)\r\n            return val;\r\n        if (typeof val === 'number')\r\n            return fromNumber(val);\r\n        if (typeof val === 'string')\r\n            return fromString(val);\r\n        // Throws for non-objects, converts non-instanceof Long:\r\n        return fromBits(val.low, val.high, val.unsigned);\r\n    }\r\n\r\n    /**\r\n     * Converts the specified value to a Long.\r\n     * @function\r\n     * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n     * @returns {!Long}\r\n     */\r\n    Long.fromValue = fromValue;\r\n\r\n    // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n    // no runtime penalty for these.\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_16_DBL = 1 << 16;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24_DBL = 1 << 24;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @const\r\n     * @inner\r\n     */\r\n    var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ZERO = fromInt(0);\r\n\r\n    /**\r\n     * Signed zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.ZERO = ZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UZERO = fromInt(0, true);\r\n\r\n    /**\r\n     * Unsigned zero.\r\n     * @type {!Long}\r\n     */\r\n    Long.UZERO = UZERO;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var ONE = fromInt(1);\r\n\r\n    /**\r\n     * Signed one.\r\n     * @type {!Long}\r\n     */\r\n    Long.ONE = ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var UONE = fromInt(1, true);\r\n\r\n    /**\r\n     * Unsigned one.\r\n     * @type {!Long}\r\n     */\r\n    Long.UONE = UONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var NEG_ONE = fromInt(-1);\r\n\r\n    /**\r\n     * Signed negative one.\r\n     * @type {!Long}\r\n     */\r\n    Long.NEG_ONE = NEG_ONE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n    /**\r\n     * Maximum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_VALUE = MAX_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n    /**\r\n     * Maximum unsigned value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n    /**\r\n     * @type {!Long}\r\n     * @inner\r\n     */\r\n    var MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n    /**\r\n     * Minimum signed value.\r\n     * @type {!Long}\r\n     */\r\n    Long.MIN_VALUE = MIN_VALUE;\r\n\r\n    /**\r\n     * @alias Long.prototype\r\n     * @inner\r\n     */\r\n    var LongPrototype = Long.prototype;\r\n\r\n    /**\r\n     * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toInt = function toInt() {\r\n        return this.unsigned ? this.low >>> 0 : this.low;\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.toNumber = function toNumber() {\r\n        if (this.unsigned)\r\n            return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n    };\r\n\r\n    /**\r\n     * Converts the Long to a string written in the specified radix.\r\n     * @param {number=} radix Radix (2-36), defaults to 10\r\n     * @returns {string}\r\n     * @override\r\n     * @throws {RangeError} If `radix` is out of range\r\n     */\r\n    LongPrototype.toString = function toString(radix) {\r\n        radix = radix || 10;\r\n        if (radix < 2 || 36 < radix)\r\n            throw RangeError('radix');\r\n        if (this.isZero())\r\n            return '0';\r\n        if (this.isNegative()) { // Unsigned Longs are never negative\r\n            if (this.eq(MIN_VALUE)) {\r\n                // We need to change the Long value before it can be negated, so we remove\r\n                // the bottom-most digit in this base and then recurse to do the rest.\r\n                var radixLong = fromNumber(radix),\r\n                    div = this.div(radixLong),\r\n                    rem1 = div.mul(radixLong).sub(this);\r\n                return div.toString(radix) + rem1.toInt().toString(radix);\r\n            } else\r\n                return '-' + this.neg().toString(radix);\r\n        }\r\n\r\n        // Do several (6) digits each time through the loop, so as to\r\n        // minimize the calls to the very expensive emulated div.\r\n        var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n            rem = this;\r\n        var result = '';\r\n        while (true) {\r\n            var remDiv = rem.div(radixToPower),\r\n                intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n                digits = intval.toString(radix);\r\n            rem = remDiv;\r\n            if (rem.isZero())\r\n                return digits + result;\r\n            else {\r\n                while (digits.length < 6)\r\n                    digits = '0' + digits;\r\n                result = '' + digits + result;\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as a signed integer.\r\n     * @returns {number} Signed high bits\r\n     */\r\n    LongPrototype.getHighBits = function getHighBits() {\r\n        return this.high;\r\n    };\r\n\r\n    /**\r\n     * Gets the high 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned high bits\r\n     */\r\n    LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n        return this.high >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as a signed integer.\r\n     * @returns {number} Signed low bits\r\n     */\r\n    LongPrototype.getLowBits = function getLowBits() {\r\n        return this.low;\r\n    };\r\n\r\n    /**\r\n     * Gets the low 32 bits as an unsigned integer.\r\n     * @returns {number} Unsigned low bits\r\n     */\r\n    LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n        return this.low >>> 0;\r\n    };\r\n\r\n    /**\r\n     * Gets the number of bits needed to represent the absolute value of this Long.\r\n     * @returns {number}\r\n     */\r\n    LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n        if (this.isNegative()) // Unsigned Longs are never negative\r\n            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n        var val = this.high != 0 ? this.high : this.low;\r\n        for (var bit = 31; bit > 0; bit--)\r\n            if ((val & (1 << bit)) != 0)\r\n                break;\r\n        return this.high != 0 ? bit + 33 : bit + 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals zero.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isZero = function isZero() {\r\n        return this.high === 0 && this.low === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is negative.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isNegative = function isNegative() {\r\n        return !this.unsigned && this.high < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is positive.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isPositive = function isPositive() {\r\n        return this.unsigned || this.high >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is odd.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isOdd = function isOdd() {\r\n        return (this.low & 1) === 1;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is even.\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.isEven = function isEven() {\r\n        return (this.low & 1) === 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.equals = function equals(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n            return false;\r\n        return this.high === other.high && this.low === other.low;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.eq = LongPrototype.equals;\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.notEquals = function notEquals(other) {\r\n        return !this.eq(/* validates */ other);\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.neq = LongPrototype.notEquals;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThan = function lessThan(other) {\r\n        return this.comp(/* validates */ other) < 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lt = LongPrototype.lessThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) <= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThan = function greaterThan(other) {\r\n        return this.comp(/* validates */ other) > 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n        return this.comp(/* validates */ other) >= 0;\r\n    };\r\n\r\n    /**\r\n     * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {boolean}\r\n     */\r\n    LongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's.\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.compare = function compare(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        if (this.eq(other))\r\n            return 0;\r\n        var thisNeg = this.isNegative(),\r\n            otherNeg = other.isNegative();\r\n        if (thisNeg && !otherNeg)\r\n            return -1;\r\n        if (!thisNeg && otherNeg)\r\n            return 1;\r\n        // At this point the sign bits are the same\r\n        if (!this.unsigned)\r\n            return this.sub(other).isNegative() ? -1 : 1;\r\n        // Both are positive if at least one is unsigned\r\n        return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n    };\r\n\r\n    /**\r\n     * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n     * @function\r\n     * @param {!Long|number|string} other Other value\r\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n     *  if the given one is greater\r\n     */\r\n    LongPrototype.comp = LongPrototype.compare;\r\n\r\n    /**\r\n     * Negates this Long's value.\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.negate = function negate() {\r\n        if (!this.unsigned && this.eq(MIN_VALUE))\r\n            return MIN_VALUE;\r\n        return this.not().add(ONE);\r\n    };\r\n\r\n    /**\r\n     * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n     * @function\r\n     * @returns {!Long} Negated Long\r\n     */\r\n    LongPrototype.neg = LongPrototype.negate;\r\n\r\n    /**\r\n     * Returns the sum of this and the specified Long.\r\n     * @param {!Long|number|string} addend Addend\r\n     * @returns {!Long} Sum\r\n     */\r\n    LongPrototype.add = function add(addend) {\r\n        if (!isLong(addend))\r\n            addend = fromValue(addend);\r\n\r\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = addend.high >>> 16;\r\n        var b32 = addend.high & 0xFFFF;\r\n        var b16 = addend.low >>> 16;\r\n        var b00 = addend.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 + b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 + b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 + b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 + b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long.\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.subtract = function subtract(subtrahend) {\r\n        if (!isLong(subtrahend))\r\n            subtrahend = fromValue(subtrahend);\r\n        return this.add(subtrahend.neg());\r\n    };\r\n\r\n    /**\r\n     * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n     * @function\r\n     * @param {!Long|number|string} subtrahend Subtrahend\r\n     * @returns {!Long} Difference\r\n     */\r\n    LongPrototype.sub = LongPrototype.subtract;\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long.\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.multiply = function multiply(multiplier) {\r\n        if (this.isZero())\r\n            return ZERO;\r\n        if (!isLong(multiplier))\r\n            multiplier = fromValue(multiplier);\r\n        if (multiplier.isZero())\r\n            return ZERO;\r\n        if (this.eq(MIN_VALUE))\r\n            return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n        if (multiplier.eq(MIN_VALUE))\r\n            return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n        if (this.isNegative()) {\r\n            if (multiplier.isNegative())\r\n                return this.neg().mul(multiplier.neg());\r\n            else\r\n                return this.neg().mul(multiplier).neg();\r\n        } else if (multiplier.isNegative())\r\n            return this.mul(multiplier.neg()).neg();\r\n\r\n        // If both longs are small, use float multiplication\r\n        if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n        // We can skip products that would overflow.\r\n\r\n        var a48 = this.high >>> 16;\r\n        var a32 = this.high & 0xFFFF;\r\n        var a16 = this.low >>> 16;\r\n        var a00 = this.low & 0xFFFF;\r\n\r\n        var b48 = multiplier.high >>> 16;\r\n        var b32 = multiplier.high & 0xFFFF;\r\n        var b16 = multiplier.low >>> 16;\r\n        var b00 = multiplier.low & 0xFFFF;\r\n\r\n        var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n        c00 += a00 * b00;\r\n        c16 += c00 >>> 16;\r\n        c00 &= 0xFFFF;\r\n        c16 += a16 * b00;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c16 += a00 * b16;\r\n        c32 += c16 >>> 16;\r\n        c16 &= 0xFFFF;\r\n        c32 += a32 * b00;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a16 * b16;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c32 += a00 * b32;\r\n        c48 += c32 >>> 16;\r\n        c32 &= 0xFFFF;\r\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n        c48 &= 0xFFFF;\r\n        return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n     * @function\r\n     * @param {!Long|number|string} multiplier Multiplier\r\n     * @returns {!Long} Product\r\n     */\r\n    LongPrototype.mul = LongPrototype.multiply;\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n     *  unsigned if this Long is unsigned.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.divide = function divide(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        if (divisor.isZero())\r\n            throw Error('division by zero');\r\n        if (this.isZero())\r\n            return this.unsigned ? UZERO : ZERO;\r\n        var approx, rem, res;\r\n        if (!this.unsigned) {\r\n            // This section is only relevant for signed longs and is derived from the\r\n            // closure library as a whole.\r\n            if (this.eq(MIN_VALUE)) {\r\n                if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                    return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n                else if (divisor.eq(MIN_VALUE))\r\n                    return ONE;\r\n                else {\r\n                    // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                    var halfThis = this.shr(1);\r\n                    approx = halfThis.div(divisor).shl(1);\r\n                    if (approx.eq(ZERO)) {\r\n                        return divisor.isNegative() ? ONE : NEG_ONE;\r\n                    } else {\r\n                        rem = this.sub(divisor.mul(approx));\r\n                        res = approx.add(rem.div(divisor));\r\n                        return res;\r\n                    }\r\n                }\r\n            } else if (divisor.eq(MIN_VALUE))\r\n                return this.unsigned ? UZERO : ZERO;\r\n            if (this.isNegative()) {\r\n                if (divisor.isNegative())\r\n                    return this.neg().div(divisor.neg());\r\n                return this.neg().div(divisor).neg();\r\n            } else if (divisor.isNegative())\r\n                return this.div(divisor.neg()).neg();\r\n            res = ZERO;\r\n        } else {\r\n            // The algorithm below has not been made for unsigned longs. It's therefore\r\n            // required to take special care of the MSB prior to running it.\r\n            if (!divisor.unsigned)\r\n                divisor = divisor.toUnsigned();\r\n            if (divisor.gt(this))\r\n                return UZERO;\r\n            if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n                return UONE;\r\n            res = UZERO;\r\n        }\r\n\r\n        // Repeat the following until the remainder is less than other:  find a\r\n        // floating-point that approximates remainder / other *from below*, add this\r\n        // into the result, and subtract it from the remainder.  It is critical that\r\n        // the approximate value is less than or equal to the real value so that the\r\n        // remainder never becomes negative.\r\n        rem = this;\r\n        while (rem.gte(divisor)) {\r\n            // Approximate the result of division. This may be a little greater or\r\n            // smaller than the actual value.\r\n            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n            // We will tweak the approximate result by changing it in the 48-th digit or\r\n            // the smallest non-fractional digit, whichever is larger.\r\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n                delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n            // Decrease the approximation until it is smaller than the remainder.  Note\r\n            // that if it is too large, the product overflows and is negative.\r\n                approxRes = fromNumber(approx),\r\n                approxRem = approxRes.mul(divisor);\r\n            while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n                approx -= delta;\r\n                approxRes = fromNumber(approx, this.unsigned);\r\n                approxRem = approxRes.mul(divisor);\r\n            }\r\n\r\n            // We know the answer can't be zero... and actually, zero would cause\r\n            // infinite recursion since we would make no progress.\r\n            if (approxRes.isZero())\r\n                approxRes = ONE;\r\n\r\n            res = res.add(approxRes);\r\n            rem = rem.sub(approxRem);\r\n        }\r\n        return res;\r\n    };\r\n\r\n    /**\r\n     * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Quotient\r\n     */\r\n    LongPrototype.div = LongPrototype.divide;\r\n\r\n    /**\r\n     * Returns this Long modulo the specified.\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.modulo = function modulo(divisor) {\r\n        if (!isLong(divisor))\r\n            divisor = fromValue(divisor);\r\n        return this.sub(this.div(divisor).mul(divisor));\r\n    };\r\n\r\n    /**\r\n     * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n     * @function\r\n     * @param {!Long|number|string} divisor Divisor\r\n     * @returns {!Long} Remainder\r\n     */\r\n    LongPrototype.mod = LongPrototype.modulo;\r\n\r\n    /**\r\n     * Returns the bitwise NOT of this Long.\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.not = function not() {\r\n        return fromBits(~this.low, ~this.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise AND of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.and = function and(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise OR of this Long and the specified.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.or = function or(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns the bitwise XOR of this Long and the given one.\r\n     * @param {!Long|number|string} other Other Long\r\n     * @returns {!Long}\r\n     */\r\n    LongPrototype.xor = function xor(other) {\r\n        if (!isLong(other))\r\n            other = fromValue(other);\r\n        return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n        else\r\n            return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRight = function shiftRight(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        if ((numBits &= 63) === 0)\r\n            return this;\r\n        else if (numBits < 32)\r\n            return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n        else\r\n            return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount.\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n        if (isLong(numBits))\r\n            numBits = numBits.toInt();\r\n        numBits &= 63;\r\n        if (numBits === 0)\r\n            return this;\r\n        else {\r\n            var high = this.high;\r\n            if (numBits < 32) {\r\n                var low = this.low;\r\n                return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n            } else if (numBits === 32)\r\n                return fromBits(high, 0, this.unsigned);\r\n            else\r\n                return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n     * @function\r\n     * @param {number|!Long} numBits Number of bits\r\n     * @returns {!Long} Shifted Long\r\n     */\r\n    LongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n    /**\r\n     * Converts this Long to signed.\r\n     * @returns {!Long} Signed long\r\n     */\r\n    LongPrototype.toSigned = function toSigned() {\r\n        if (!this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, false);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to unsigned.\r\n     * @returns {!Long} Unsigned long\r\n     */\r\n    LongPrototype.toUnsigned = function toUnsigned() {\r\n        if (this.unsigned)\r\n            return this;\r\n        return fromBits(this.low, this.high, true);\r\n    };\r\n\r\n    /**\r\n     * Converts this Long to its byte representation.\r\n     * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n     * @returns {!Array.<number>} Byte representation\r\n     */\r\n    LongPrototype.toBytes = function(le) {\r\n        return le ? this.toBytesLE() : this.toBytesBE();\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its little endian byte representation.\r\n     * @returns {!Array.<number>} Little endian byte representation\r\n     */\r\n    LongPrototype.toBytesLE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n             lo         & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n             hi         & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>> 24) & 0xff\r\n        ];\r\n    }\r\n\r\n    /**\r\n     * Converts this Long to its big endian byte representation.\r\n     * @returns {!Array.<number>} Big endian byte representation\r\n     */\r\n    LongPrototype.toBytesBE = function() {\r\n        var hi = this.high,\r\n            lo = this.low;\r\n        return [\r\n            (hi >>> 24) & 0xff,\r\n            (hi >>> 16) & 0xff,\r\n            (hi >>>  8) & 0xff,\r\n             hi         & 0xff,\r\n            (lo >>> 24) & 0xff,\r\n            (lo >>> 16) & 0xff,\r\n            (lo >>>  8) & 0xff,\r\n             lo         & 0xff\r\n        ];\r\n    }\r\n\r\n    return Long;\r\n});\r\n","// https://gist.githubusercontent.com/wlzla000/bac83df6d3c51916c4dd0bc947e46947/raw/7ee3462b095ab22580ddaf191f44a590da6fe33b/RIPEMD-160.js\n\n/*\n\tRIPEMD-160.js\n\n\t\tdeveloped\n\t\t\tby K. (https://github.com/wlzla000)\n\t\t\ton December 27-29, 2017,\n\n\t\tlicensed under\n\n\n\t\tthe MIT license\n\n\t\tCopyright (c) 2017 K.\n\n\t\t Permission is hereby granted, free of charge, to any person\n\t\tobtaining a copy of this software and associated documentation\n\t\tfiles (the \"Software\"), to deal in the Software without\n\t\trestriction, including without limitation the rights to use,\n\t\tcopy, modify, merge, publish, distribute, sublicense, and/or\n\t\tsell copies of the Software, and to permit persons to whom the\n\t\tSoftware is furnished to do so, subject to the following\n\t\tconditions:\n\n\t\t The above copyright notice and this permission notice shall be\n\t\tincluded in all copies or substantial portions of the Software.\n\n\t\t THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\t\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n\t\tOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\t\tNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\t\tHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\t\tWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\t\tFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\t\tOTHER DEALINGS IN THE SOFTWARE.\n*/\n\n\"use strict\";\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar RIPEMD160 = function () {\n\tfunction RIPEMD160() {\n\t\t// https://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf\n\t\t// http://shodhganga.inflibnet.ac.in/bitstream/10603/22978/13/13_appendix.pdf\n\n\t\t_classCallCheck(this, RIPEMD160);\n\t}\n\n\t_createClass(RIPEMD160, null, [{\n\t\tkey: \"get_n_pad_bytes\",\n\t\tvalue: function get_n_pad_bytes(message_size /* in bytes, 1 byte is 8 bits. */) {\n\t\t\t//  Obtain the number of bytes needed to pad the message.\n\t\t\t// It does not contain the size of the message size information.\n\t\t\t/*\n   \thttps://webcache.googleusercontent.com/search?q=cache:CnLOgolTHYEJ:https://www.cosic.esat.kuleuven.be/publications/article-317.pdf\n   \t\tThe Cryptographic Hash Function RIPEMD-160\n   \t\twritten by\n   \t\tBart Preneel,\n   \t\tHans Dobbertin,\n   \t\tAntoon Bosselaers\n   \tin\n   \t\t1997.\n   \t\t--------------------------------------------------\n   \t\t§5     Description of RIPEMD-160\n   \t\t......\n   \t\t In order to guarantee that the total input size is a\n   \tmultiple of 512 bits, the input is padded in the same\n   \tway as for all the members of the MD4-family: one\n   \tappends a single 1 followed by a string of 0s (the\n   \tnumber of 0s lies between 0 and 511); the last 64 bits\n   \tof the extended input contain the binary representation\n   \tof the input size in bits, least significant byte first.\n   */\n\t\t\t/*\n   \thttps://tools.ietf.org/rfc/rfc1186.txt\n   \t\tRFC 1186: MD4 Message Digest Algorithm.\n   \t\twritten by\n   \t\tRonald Linn Rivest\n   \tin\n   \t\tOctober 1990.\n   \t\t--------------------------------------------------\n   \t\t§3     MD4 Algorithm Description\n   \t\t......\n   \t\tStep 1. Append padding bits\n   \t\t The message is \"padded\" (extended) so that its length\n   \t(in bits) is congruent to 448, modulo 512. That is, the\n   \tmessage is extended so that it is just 64 bits shy of\n   \tbeing a multiple of 512 bits long. Padding is always\n   \tperformed, even if the length of the message is already\n   \tcongruent to 448, modulo 512 (in which case 512 bits of\n   \tpadding are added).\n   \t\t Padding is performed as follows: a single \"1\" bit is\n   \tappended to the message, and then enough zero bits are\n   \tappended so that the length in bits of the padded\n   \tmessage becomes congruent to 448, modulo 512.\n   \t\tStep 2. Append length\n   \t\t A 64-bit representation of b (the length of the message\n   \tbefore the padding bits were added) is appended to the\n   \tresult of the previous step. In the unlikely event that\n   \tb is greater than 2^64, then only the low-order 64 bits\n   \tof b are used. (These bits are appended as two 32-bit\n   \twords and appended low-order word first in accordance\n   \twith the previous conventions.)\n   \t\t At this point the resulting message (after padding with\n   \tbits and with b) has a length that is an exact multiple\n   \tof 512 bits. Equivalently, this message has a length\n   \tthat is an exact multiple of 16 (32-bit) words. Let\n   \tM[0 ... N-1] denote the words of the resulting message,\n   \twhere N is a multiple of 16.\n   */\n\t\t\t// https://crypto.stackexchange.com/a/32407/54568\n\t\t\t/*\n   \tExample case  # 1\n   \t\t[0 bit: message.]\n   \t\t[1 bit: 1.]\n   \t\t[447 bits: 0.]\n   \t\t[64 bits: message size information.]\n   \t\tExample case  # 2\n   \t\t[512-bits: message]\n   \t\t[1 bit: 1.]\n   \t\t[447 bits: 0.]\n   \t\t[64 bits: message size information.]\n   \t\tExample case  # 3\n   \t\t[(512 - 64 = 448) bits: message.]\n   \t\t[1 bit: 1.]\n   \t\t[511 bits: 0.]\n   \t\t[64 bits: message size information.]\n   \t\tExample case  # 4\n   \t\t[(512 - 65 = 447) bits: message.]\n   \t\t[1 bit: 1.]\n   \t\t[0 bit: 0.]\n   \t\t[64 bits: message size information.]\n   */\n\t\t\t// The number of padding zero bits:\n\t\t\t//      511 - [{(message size in bits) + 64} (mod 512)]\n\t\t\treturn 64 - (message_size + 8 & 63 /* 63 */);\n\t\t}\n\t}, {\n\t\tkey: \"pad\",\n\t\tvalue: function pad(message /* An ArrayBuffer. */) {\n\t\t\tvar message_size = message.byteLength;\n\t\t\tvar n_pad = RIPEMD160.get_n_pad_bytes(message_size);\n\n\t\t\t//  `Number.MAX_SAFE_INTEGER` is ((2 ** 53) - 1) and\n\t\t\t// bitwise operation in Javascript is done on 32-bits operands.\n\t\t\tvar divmod = function divmod(dividend, divisor) {\n\t\t\t\treturn [Math.floor(dividend / divisor), dividend % divisor];\n\t\t\t};\n\t\t\t/*\n   To shift\n     00000000 000????? ???????? ???????? ???????? ???????? ???????? ????????\n                                      t o\n    00000000 ???????? ???????? ???????? ???????? ???????? ???????? ?????000\n   --------------------------------------------------------------------------------\n   Method #1\n      00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????\n    [00000000 000AAAAA AAAAAAAA AAAAAAAA] (<A> captured)\n    [00000000 AAAAAAAA AAAAAAAA AAAAA000] (<A> shifted)\n                          (<B> captured) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBBBBB]\n                      (<B> shifted) [BBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n    [00000000 AAAAAAAA AAAAAAAA AAAAABBB] (<A> & <B_2> merged)\n    [00000000 AAAAAAAA AAAAAAAA AAAAABBB][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n     00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000\n   \tconst uint32_max_plus_1 = 0x100000000; // (2 ** 32)\n   const [\n   \tmsg_byte_size_most, // Value range [0, (2 ** 21) - 1].\n   \tmsg_byte_size_least // Value range [0, (2 ** 32) - 1].\n   ] = divmod(message_size, uint32_max_plus_1);\n   const [\n   \tcarry, // Value range [0, 7].\n   \tmsg_bit_size_least // Value range [0, (2 ** 32) - 8].\n   ] = divmod(message_byte_size_least * 8, uint32_max_plus_1);\n   const message_bit_size_most = message_byte_size_most * 8\n   \t+ carry; // Value range [0, (2 ** 24) - 1].\n   --------------------------------------------------------------------------------\n   Method #2\n     00000000 000????? ???????? ????????  ???????? ???????? ???????? ????????\n       [00000 000AAAAA AAAAAAAA AAAAAAAA  AAA] (<A> captured)\n                          (<B> captured) [000BBBBB BBBBBBBB BBBBBBBB BBBBBBBB]\n                           (<B> shifted) [BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n    [00000000 AAAAAAAA AAAAAAAA AAAAAAAA][BBBBBBBB BBBBBBBB BBBBBBBB BBBBB000]\n     00000000 ???????? ???????? ????????  ???????? ???????? ???????? ?????000\n   \t*/\n\n\t\t\tvar _divmod$map = divmod(message_size, 536870912 /* (2 ** 29) */).map(function (x, index) {\n\t\t\t\treturn index ? x * 8 : x;\n\t\t\t}),\n\t\t\t    _divmod$map2 = _slicedToArray(_divmod$map, 2),\n\t\t\t    msg_bit_size_most = _divmod$map2[0],\n\t\t\t    msg_bit_size_least = _divmod$map2[1];\n\n\t\t\t// `ArrayBuffer.transfer()` is not supported.\n\n\n\t\t\tvar padded = new Uint8Array(message_size + n_pad + 8);\n\t\t\tpadded.set(new Uint8Array(message), 0);\n\t\t\tvar data_view = new DataView(padded.buffer);\n\t\t\tdata_view.setUint8(message_size, 128);\n\t\t\tdata_view.setUint32(message_size + n_pad, msg_bit_size_least, true // Little-endian\n\t\t\t);\n\t\t\tdata_view.setUint32(message_size + n_pad + 4, msg_bit_size_most, true // Little-endian\n\t\t\t);\n\n\t\t\treturn padded.buffer;\n\t\t}\n\t}, {\n\t\tkey: \"f\",\n\t\tvalue: function f(j, x, y, z) {\n\t\t\tif (0 <= j && j <= 15) {\n\t\t\t\t// Exclusive-OR\n\t\t\t\treturn x ^ y ^ z;\n\t\t\t}\n\t\t\tif (16 <= j && j <= 31) {\n\t\t\t\t// Multiplexing (muxing)\n\t\t\t\treturn x & y | ~x & z;\n\t\t\t}\n\t\t\tif (32 <= j && j <= 47) {\n\t\t\t\treturn (x | ~y) ^ z;\n\t\t\t}\n\t\t\tif (48 <= j && j <= 63) {\n\t\t\t\t// Multiplexing (muxing)\n\t\t\t\treturn x & z | y & ~z;\n\t\t\t}\n\t\t\tif (64 <= j && j <= 79) {\n\t\t\t\treturn x ^ (y | ~z);\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"K\",\n\t\tvalue: function K(j) {\n\t\t\tif (0 <= j && j <= 15) {\n\t\t\t\treturn 0x00000000;\n\t\t\t}\n\t\t\tif (16 <= j && j <= 31) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.SQRT2)\n\t\t\t\treturn 0x5A827999;\n\t\t\t}\n\t\t\tif (32 <= j && j <= 47) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.sqrt(3))\n\t\t\t\treturn 0x6ED9EBA1;\n\t\t\t}\n\t\t\tif (48 <= j && j <= 63) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.sqrt(5))\n\t\t\t\treturn 0x8F1BBCDC;\n\t\t\t}\n\t\t\tif (64 <= j && j <= 79) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.sqrt(7))\n\t\t\t\treturn 0xA953FD4E;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"KP\",\n\t\tvalue: function KP(j) // K'\n\t\t{\n\t\t\tif (0 <= j && j <= 15) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(2))\n\t\t\t\treturn 0x50A28BE6;\n\t\t\t}\n\t\t\tif (16 <= j && j <= 31) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(3))\n\t\t\t\treturn 0x5C4DD124;\n\t\t\t}\n\t\t\tif (32 <= j && j <= 47) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(5))\n\t\t\t\treturn 0x6D703EF3;\n\t\t\t}\n\t\t\tif (48 <= j && j <= 63) {\n\t\t\t\t// Math.floor((2 ** 30) * Math.cbrt(7))\n\t\t\t\treturn 0x7A6D76E9;\n\t\t\t}\n\t\t\tif (64 <= j && j <= 79) {\n\t\t\t\treturn 0x00000000;\n\t\t\t}\n\t\t}\n\t}, {\n\t\tkey: \"add_modulo32\",\n\t\tvalue: function add_modulo32() /* ...... */{\n\t\t\t// 1.  Modulo addition (addition modulo) is associative.\n\t\t\t//    https://proofwiki.org/wiki/Modulo_Addition_is_Associative\n\t\t\t// 2.  Bitwise operation in Javascript\n\t\t\t//    is done on 32-bits operands\n\t\t\t//    and results in a 32-bits value.\n\t\t\treturn Array.from(arguments).reduce(function (a, b) {\n\t\t\t\treturn a + b;\n\t\t\t}, 0) | 0;\n\t\t}\n\t}, {\n\t\tkey: \"rol32\",\n\t\tvalue: function rol32(value, count) {\n\t\t\t// Cyclic left shift (rotate) on 32-bits value.\n\t\t\treturn value << count | value >>> 32 - count;\n\t\t}\n\t}, {\n\t\tkey: \"hash\",\n\t\tvalue: function hash(message /* An ArrayBuffer. */) {\n\t\t\t//////////       Padding       //////////\n\n\t\t\t// The padded message.\n\t\t\tvar padded = RIPEMD160.pad(message);\n\n\t\t\t//////////     Compression     //////////\n\n\t\t\t// Message word selectors.\n\t\t\tvar r = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13];\n\t\t\tvar rP = [// r'\n\t\t\t5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11];\n\n\t\t\t// Amounts for 'rotate left' operation.\n\t\t\tvar s = [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6];\n\t\t\tvar sP = [// s'\n\t\t\t8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11];\n\n\t\t\t// The size, in bytes, of a word.\n\t\t\tvar word_size = 4;\n\n\t\t\t// The size, in bytes, of a 16-words block.\n\t\t\tvar block_size = 64;\n\n\t\t\t// The number of the 16-words blocks.\n\t\t\tvar t = padded.byteLength / block_size;\n\n\t\t\t//  The message after padding consists of t 16-word blocks that\n\t\t\t// are denoted with X_i[j], with 0≤i≤(t − 1) and 0≤j≤15.\n\t\t\tvar X = new Array(t).fill(undefined).map(function (_, i) {\n\t\t\t\treturn function (j) {\n\t\t\t\t\treturn new DataView(padded, i * block_size, block_size).getUint32(j * word_size, true // Little-endian\n\t\t\t\t\t);\n\t\t\t\t};\n\t\t\t});\n\n\t\t\t//  The result of RIPEMD-160 is contained in five 32-bit words,\n\t\t\t// which form the internal state of the algorithm. The final\n\t\t\t// content of these five 32-bit words is converted to a 160-bit\n\t\t\t// string, again using the little-endian convention.\n\t\t\tvar h = [0x67452301, // h_0\n\t\t\t0xEFCDAB89, // h_1\n\t\t\t0x98BADCFE, // h_2\n\t\t\t0x10325476, // h_3\n\t\t\t0xC3D2E1F0 // h_4\n\t\t\t];\n\n\t\t\tfor (var i = 0; i < t; ++i) {\n\t\t\t\tvar A = h[0],\n\t\t\t\t    B = h[1],\n\t\t\t\t    C = h[2],\n\t\t\t\t    D = h[3],\n\t\t\t\t    E = h[4];\n\t\t\t\tvar AP = A,\n\t\t\t\t    BP = B,\n\t\t\t\t    CP = C,\n\t\t\t\t    DP = D,\n\t\t\t\t    EP = E;\n\t\t\t\tfor (var j = 0; j < 80; ++j) {\n\t\t\t\t\t// Left rounds\n\t\t\t\t\tvar _T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(A, RIPEMD160.f(j, B, C, D), X[i](r[j]), RIPEMD160.K(j)), s[j]), E);\n\t\t\t\t\tA = E;\n\t\t\t\t\tE = D;\n\t\t\t\t\tD = RIPEMD160.rol32(C, 10);\n\t\t\t\t\tC = B;\n\t\t\t\t\tB = _T;\n\n\t\t\t\t\t// Right rounds\n\t\t\t\t\t_T = RIPEMD160.add_modulo32(RIPEMD160.rol32(RIPEMD160.add_modulo32(AP, RIPEMD160.f(79 - j, BP, CP, DP), X[i](rP[j]), RIPEMD160.KP(j)), sP[j]), EP);\n\t\t\t\t\tAP = EP;\n\t\t\t\t\tEP = DP;\n\t\t\t\t\tDP = RIPEMD160.rol32(CP, 10);\n\t\t\t\t\tCP = BP;\n\t\t\t\t\tBP = _T;\n\t\t\t\t}\n\t\t\t\tvar T = RIPEMD160.add_modulo32(h[1], C, DP);\n\t\t\t\th[1] = RIPEMD160.add_modulo32(h[2], D, EP);\n\t\t\t\th[2] = RIPEMD160.add_modulo32(h[3], E, AP);\n\t\t\t\th[3] = RIPEMD160.add_modulo32(h[4], A, BP);\n\t\t\t\th[4] = RIPEMD160.add_modulo32(h[0], B, CP);\n\t\t\t\th[0] = T;\n\t\t\t}\n\n\t\t\t//  The final output string then consists of the concatenatation\n\t\t\t// of h_0, h_1, h_2, h_3, and h_4 after converting each h_i to a\n\t\t\t// 4-byte string using the little-endian convention.\n\t\t\tvar result = new ArrayBuffer(20);\n\t\t\tvar data_view = new DataView(result);\n\t\t\th.forEach(function (h_i, i) {\n\t\t\t\treturn data_view.setUint32(i * 4, h_i, true);\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t}]);\n\n\treturn RIPEMD160;\n}();\n\nmodule.exports = {\n\tRIPEMD160: RIPEMD160\n};\n"],"sourceRoot":""}